#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RetailSystem.DB
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="RetailSystem")]
	public partial class DBContextDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAllowancesPaid(AllowancesPaid instance);
    partial void UpdateAllowancesPaid(AllowancesPaid instance);
    partial void DeleteAllowancesPaid(AllowancesPaid instance);
    partial void InsertBank(Bank instance);
    partial void UpdateBank(Bank instance);
    partial void DeleteBank(Bank instance);
    partial void InsertChartOfAccount(ChartOfAccount instance);
    partial void UpdateChartOfAccount(ChartOfAccount instance);
    partial void DeleteChartOfAccount(ChartOfAccount instance);
    partial void InsertClientType(ClientType instance);
    partial void UpdateClientType(ClientType instance);
    partial void DeleteClientType(ClientType instance);
    partial void InsertDepartment(Department instance);
    partial void UpdateDepartment(Department instance);
    partial void DeleteDepartment(Department instance);
    partial void InsertHOD(HOD instance);
    partial void UpdateHOD(HOD instance);
    partial void DeleteHOD(HOD instance);
    partial void InsertInvoiceDetail(InvoiceDetail instance);
    partial void UpdateInvoiceDetail(InvoiceDetail instance);
    partial void DeleteInvoiceDetail(InvoiceDetail instance);
    partial void InsertInvoiceItem(InvoiceItem instance);
    partial void UpdateInvoiceItem(InvoiceItem instance);
    partial void DeleteInvoiceItem(InvoiceItem instance);
    partial void InsertInvoicePayment(InvoicePayment instance);
    partial void UpdateInvoicePayment(InvoicePayment instance);
    partial void DeleteInvoicePayment(InvoicePayment instance);
    partial void InsertInvoice(Invoice instance);
    partial void UpdateInvoice(Invoice instance);
    partial void DeleteInvoice(Invoice instance);
    partial void InsertJournal(Journal instance);
    partial void UpdateJournal(Journal instance);
    partial void DeleteJournal(Journal instance);
    partial void InsertLedger(Ledger instance);
    partial void UpdateLedger(Ledger instance);
    partial void DeleteLedger(Ledger instance);
    partial void InsertPayroll(Payroll instance);
    partial void UpdatePayroll(Payroll instance);
    partial void DeletePayroll(Payroll instance);
    partial void InsertPayrollDetail(PayrollDetail instance);
    partial void UpdatePayrollDetail(PayrollDetail instance);
    partial void DeletePayrollDetail(PayrollDetail instance);
    partial void InsertPermission(Permission instance);
    partial void UpdatePermission(Permission instance);
    partial void DeletePermission(Permission instance);
    partial void InsertPosting(Posting instance);
    partial void UpdatePosting(Posting instance);
    partial void DeletePosting(Posting instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertSalary(Salary instance);
    partial void UpdateSalary(Salary instance);
    partial void DeleteSalary(Salary instance);
    partial void InsertSaleType(SaleType instance);
    partial void UpdateSaleType(SaleType instance);
    partial void DeleteSaleType(SaleType instance);
    partial void InsertTransaction(Transaction instance);
    partial void UpdateTransaction(Transaction instance);
    partial void DeleteTransaction(Transaction instance);
    partial void InsertTransactionDetail(TransactionDetail instance);
    partial void UpdateTransactionDetail(TransactionDetail instance);
    partial void DeleteTransactionDetail(TransactionDetail instance);
    partial void InsertTransactionType(TransactionType instance);
    partial void UpdateTransactionType(TransactionType instance);
    partial void DeleteTransactionType(TransactionType instance);
    partial void InsertUserDetail(UserDetail instance);
    partial void UpdateUserDetail(UserDetail instance);
    partial void DeleteUserDetail(UserDetail instance);
    partial void InsertUserRolesContainer(UserRolesContainer instance);
    partial void UpdateUserRolesContainer(UserRolesContainer instance);
    partial void DeleteUserRolesContainer(UserRolesContainer instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertUserToEmployee(UserToEmployee instance);
    partial void UpdateUserToEmployee(UserToEmployee instance);
    partial void DeleteUserToEmployee(UserToEmployee instance);
    partial void InsertWareHouse(WareHouse instance);
    partial void UpdateWareHouse(WareHouse instance);
    partial void DeleteWareHouse(WareHouse instance);
    partial void InsertInventory(Inventory instance);
    partial void UpdateInventory(Inventory instance);
    partial void DeleteInventory(Inventory instance);
    partial void InsertInventoryBalance(InventoryBalance instance);
    partial void UpdateInventoryBalance(InventoryBalance instance);
    partial void DeleteInventoryBalance(InventoryBalance instance);
    partial void InsertPaymentBankContainer(PaymentBankContainer instance);
    partial void UpdatePaymentBankContainer(PaymentBankContainer instance);
    partial void DeletePaymentBankContainer(PaymentBankContainer instance);
    partial void InsertOrderLine(OrderLine instance);
    partial void UpdateOrderLine(OrderLine instance);
    partial void DeleteOrderLine(OrderLine instance);
    partial void InsertPayment(Payment instance);
    partial void UpdatePayment(Payment instance);
    partial void DeletePayment(Payment instance);
    partial void InsertPaidSalary(PaidSalary instance);
    partial void UpdatePaidSalary(PaidSalary instance);
    partial void DeletePaidSalary(PaidSalary instance);
    partial void InsertFiscalYear(FiscalYear instance);
    partial void UpdateFiscalYear(FiscalYear instance);
    partial void DeleteFiscalYear(FiscalYear instance);
    partial void InsertDefaultFiscalYear(DefaultFiscalYear instance);
    partial void UpdateDefaultFiscalYear(DefaultFiscalYear instance);
    partial void DeleteDefaultFiscalYear(DefaultFiscalYear instance);
    partial void InsertBankAccount(BankAccount instance);
    partial void UpdateBankAccount(BankAccount instance);
    partial void DeleteBankAccount(BankAccount instance);
    partial void InsertAccountTransaction(AccountTransaction instance);
    partial void UpdateAccountTransaction(AccountTransaction instance);
    partial void DeleteAccountTransaction(AccountTransaction instance);
    partial void InsertTransaction1(Transaction1 instance);
    partial void UpdateTransaction1(Transaction1 instance);
    partial void DeleteTransaction1(Transaction1 instance);
    partial void InsertDefaultCashAccount(DefaultCashAccount instance);
    partial void UpdateDefaultCashAccount(DefaultCashAccount instance);
    partial void DeleteDefaultCashAccount(DefaultCashAccount instance);
    partial void InsertUserWareHouseContainer(UserWareHouseContainer instance);
    partial void UpdateUserWareHouseContainer(UserWareHouseContainer instance);
    partial void DeleteUserWareHouseContainer(UserWareHouseContainer instance);
    partial void InsertVendor(Vendor instance);
    partial void UpdateVendor(Vendor instance);
    partial void DeleteVendor(Vendor instance);
    partial void InsertEmployee(Employee instance);
    partial void UpdateEmployee(Employee instance);
    partial void DeleteEmployee(Employee instance);
    partial void InsertCashAccount(CashAccount instance);
    partial void UpdateCashAccount(CashAccount instance);
    partial void DeleteCashAccount(CashAccount instance);
    partial void InsertDefaultBankAccount(DefaultBankAccount instance);
    partial void UpdateDefaultBankAccount(DefaultBankAccount instance);
    partial void DeleteDefaultBankAccount(DefaultBankAccount instance);
    partial void InsertPaymentLine(PaymentLine instance);
    partial void UpdatePaymentLine(PaymentLine instance);
    partial void DeletePaymentLine(PaymentLine instance);
    partial void InsertProduct(Product instance);
    partial void UpdateProduct(Product instance);
    partial void DeleteProduct(Product instance);
    partial void InsertCashTransaction(CashTransaction instance);
    partial void UpdateCashTransaction(CashTransaction instance);
    partial void DeleteCashTransaction(CashTransaction instance);
    partial void InsertClient(Client instance);
    partial void UpdateClient(Client instance);
    partial void DeleteClient(Client instance);
    partial void InsertOrder(Order instance);
    partial void UpdateOrder(Order instance);
    partial void DeleteOrder(Order instance);
    #endregion
		
		public DBContextDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["RetailSystemConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DBContextDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBContextDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBContextDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBContextDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AllowancesPaid> AllowancesPaids
		{
			get
			{
				return this.GetTable<AllowancesPaid>();
			}
		}
		
		public System.Data.Linq.Table<BalanceSheet> BalanceSheets
		{
			get
			{
				return this.GetTable<BalanceSheet>();
			}
		}
		
		public System.Data.Linq.Table<Bank> Banks
		{
			get
			{
				return this.GetTable<Bank>();
			}
		}
		
		public System.Data.Linq.Table<ChartOfAccount> ChartOfAccounts
		{
			get
			{
				return this.GetTable<ChartOfAccount>();
			}
		}
		
		public System.Data.Linq.Table<ClientType> ClientTypes
		{
			get
			{
				return this.GetTable<ClientType>();
			}
		}
		
		public System.Data.Linq.Table<Department> Departments
		{
			get
			{
				return this.GetTable<Department>();
			}
		}
		
		public System.Data.Linq.Table<HOD> HODs
		{
			get
			{
				return this.GetTable<HOD>();
			}
		}
		
		public System.Data.Linq.Table<IncomeStatement> IncomeStatements
		{
			get
			{
				return this.GetTable<IncomeStatement>();
			}
		}
		
		public System.Data.Linq.Table<InvoiceDetail> InvoiceDetails
		{
			get
			{
				return this.GetTable<InvoiceDetail>();
			}
		}
		
		public System.Data.Linq.Table<InvoiceItem> InvoiceItems
		{
			get
			{
				return this.GetTable<InvoiceItem>();
			}
		}
		
		public System.Data.Linq.Table<InvoicePayment> InvoicePayments
		{
			get
			{
				return this.GetTable<InvoicePayment>();
			}
		}
		
		public System.Data.Linq.Table<Invoice> Invoices
		{
			get
			{
				return this.GetTable<Invoice>();
			}
		}
		
		public System.Data.Linq.Table<Journal> Journals
		{
			get
			{
				return this.GetTable<Journal>();
			}
		}
		
		public System.Data.Linq.Table<Ledger> Ledgers
		{
			get
			{
				return this.GetTable<Ledger>();
			}
		}
		
		public System.Data.Linq.Table<OwnerEquity> OwnerEquities
		{
			get
			{
				return this.GetTable<OwnerEquity>();
			}
		}
		
		public System.Data.Linq.Table<Payroll> Payrolls
		{
			get
			{
				return this.GetTable<Payroll>();
			}
		}
		
		public System.Data.Linq.Table<PayrollDetail> PayrollDetails
		{
			get
			{
				return this.GetTable<PayrollDetail>();
			}
		}
		
		public System.Data.Linq.Table<Permission> Permissions
		{
			get
			{
				return this.GetTable<Permission>();
			}
		}
		
		public System.Data.Linq.Table<Posting> Postings
		{
			get
			{
				return this.GetTable<Posting>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<Salary> Salaries
		{
			get
			{
				return this.GetTable<Salary>();
			}
		}
		
		public System.Data.Linq.Table<SaleType> SaleTypes
		{
			get
			{
				return this.GetTable<SaleType>();
			}
		}
		
		public System.Data.Linq.Table<Transaction> Transactions
		{
			get
			{
				return this.GetTable<Transaction>();
			}
		}
		
		public System.Data.Linq.Table<TransactionDetail> TransactionDetails
		{
			get
			{
				return this.GetTable<TransactionDetail>();
			}
		}
		
		public System.Data.Linq.Table<TransactionType> TransactionTypes
		{
			get
			{
				return this.GetTable<TransactionType>();
			}
		}
		
		public System.Data.Linq.Table<TrialBalance> TrialBalances
		{
			get
			{
				return this.GetTable<TrialBalance>();
			}
		}
		
		public System.Data.Linq.Table<UserDetail> UserDetails
		{
			get
			{
				return this.GetTable<UserDetail>();
			}
		}
		
		public System.Data.Linq.Table<UserRolesContainer> UserRolesContainers
		{
			get
			{
				return this.GetTable<UserRolesContainer>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<UserToEmployee> UserToEmployees
		{
			get
			{
				return this.GetTable<UserToEmployee>();
			}
		}
		
		public System.Data.Linq.Table<WareHouse> WareHouses
		{
			get
			{
				return this.GetTable<WareHouse>();
			}
		}
		
		public System.Data.Linq.Table<Inventory> Inventories
		{
			get
			{
				return this.GetTable<Inventory>();
			}
		}
		
		public System.Data.Linq.Table<InventoryBalance> InventoryBalances
		{
			get
			{
				return this.GetTable<InventoryBalance>();
			}
		}
		
		public System.Data.Linq.Table<PaymentBankContainer> PaymentBankContainers
		{
			get
			{
				return this.GetTable<PaymentBankContainer>();
			}
		}
		
		public System.Data.Linq.Table<OrderLine> OrderLines
		{
			get
			{
				return this.GetTable<OrderLine>();
			}
		}
		
		public System.Data.Linq.Table<Payment> Payments
		{
			get
			{
				return this.GetTable<Payment>();
			}
		}
		
		public System.Data.Linq.Table<PaidSalary> PaidSalaries
		{
			get
			{
				return this.GetTable<PaidSalary>();
			}
		}
		
		public System.Data.Linq.Table<FiscalYear> FiscalYears
		{
			get
			{
				return this.GetTable<FiscalYear>();
			}
		}
		
		public System.Data.Linq.Table<DefaultFiscalYear> DefaultFiscalYears
		{
			get
			{
				return this.GetTable<DefaultFiscalYear>();
			}
		}
		
		public System.Data.Linq.Table<BankAccount> BankAccounts
		{
			get
			{
				return this.GetTable<BankAccount>();
			}
		}
		
		public System.Data.Linq.Table<AccountTransaction> AccountTransactions
		{
			get
			{
				return this.GetTable<AccountTransaction>();
			}
		}
		
		public System.Data.Linq.Table<Transaction1> Transaction1s
		{
			get
			{
				return this.GetTable<Transaction1>();
			}
		}
		
		public System.Data.Linq.Table<DefaultCashAccount> DefaultCashAccounts
		{
			get
			{
				return this.GetTable<DefaultCashAccount>();
			}
		}
		
		public System.Data.Linq.Table<UserWareHouseContainer> UserWareHouseContainers
		{
			get
			{
				return this.GetTable<UserWareHouseContainer>();
			}
		}
		
		public System.Data.Linq.Table<Vendor> Vendors
		{
			get
			{
				return this.GetTable<Vendor>();
			}
		}
		
		public System.Data.Linq.Table<Employee> Employees
		{
			get
			{
				return this.GetTable<Employee>();
			}
		}
		
		public System.Data.Linq.Table<CashAccount> CashAccounts
		{
			get
			{
				return this.GetTable<CashAccount>();
			}
		}
		
		public System.Data.Linq.Table<DefaultBankAccount> DefaultBankAccounts
		{
			get
			{
				return this.GetTable<DefaultBankAccount>();
			}
		}
		
		public System.Data.Linq.Table<PaymentLine> PaymentLines
		{
			get
			{
				return this.GetTable<PaymentLine>();
			}
		}
		
		public System.Data.Linq.Table<Product> Products
		{
			get
			{
				return this.GetTable<Product>();
			}
		}
		
		public System.Data.Linq.Table<CashTransaction> CashTransactions
		{
			get
			{
				return this.GetTable<CashTransaction>();
			}
		}
		
		public System.Data.Linq.Table<Client> Clients
		{
			get
			{
				return this.GetTable<Client>();
			}
		}
		
		public System.Data.Linq.Table<Order> Orders
		{
			get
			{
				return this.GetTable<Order>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AllowancesPaid")]
	public partial class AllowancesPaid : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _PaidSalaryId;
		
		private string _AllowancePaid;
		
		private string _AllowanceTitle;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnPaidSalaryIdChanging(System.Nullable<int> value);
    partial void OnPaidSalaryIdChanged();
    partial void OnAllowancePaidChanging(string value);
    partial void OnAllowancePaidChanged();
    partial void OnAllowanceTitleChanging(string value);
    partial void OnAllowanceTitleChanged();
    #endregion
		
		public AllowancesPaid()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaidSalaryId", DbType="Int")]
		public System.Nullable<int> PaidSalaryId
		{
			get
			{
				return this._PaidSalaryId;
			}
			set
			{
				if ((this._PaidSalaryId != value))
				{
					this.OnPaidSalaryIdChanging(value);
					this.SendPropertyChanging();
					this._PaidSalaryId = value;
					this.SendPropertyChanged("PaidSalaryId");
					this.OnPaidSalaryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllowancePaid", DbType="NVarChar(MAX)")]
		public string AllowancePaid
		{
			get
			{
				return this._AllowancePaid;
			}
			set
			{
				if ((this._AllowancePaid != value))
				{
					this.OnAllowancePaidChanging(value);
					this.SendPropertyChanging();
					this._AllowancePaid = value;
					this.SendPropertyChanged("AllowancePaid");
					this.OnAllowancePaidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllowanceTitle", DbType="NVarChar(MAX)")]
		public string AllowanceTitle
		{
			get
			{
				return this._AllowanceTitle;
			}
			set
			{
				if ((this._AllowanceTitle != value))
				{
					this.OnAllowanceTitleChanging(value);
					this.SendPropertyChanging();
					this._AllowanceTitle = value;
					this.SendPropertyChanged("AllowanceTitle");
					this.OnAllowanceTitleChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BalanceSheet")]
	public partial class BalanceSheet
	{
		
		private string _ACCOUNTID;
		
		private string _ACCOUNTNAME;
		
		private System.Nullable<double> _ACCOUNTTOTAL;
		
		private string _TYPE;
		
		public BalanceSheet()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ACCOUNTID", DbType="NVarChar(50)")]
		public string ACCOUNTID
		{
			get
			{
				return this._ACCOUNTID;
			}
			set
			{
				if ((this._ACCOUNTID != value))
				{
					this._ACCOUNTID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ACCOUNTNAME", DbType="NVarChar(50)")]
		public string ACCOUNTNAME
		{
			get
			{
				return this._ACCOUNTNAME;
			}
			set
			{
				if ((this._ACCOUNTNAME != value))
				{
					this._ACCOUNTNAME = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ACCOUNTTOTAL", DbType="Float")]
		public System.Nullable<double> ACCOUNTTOTAL
		{
			get
			{
				return this._ACCOUNTTOTAL;
			}
			set
			{
				if ((this._ACCOUNTTOTAL != value))
				{
					this._ACCOUNTTOTAL = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TYPE", DbType="NVarChar(50)")]
		public string TYPE
		{
			get
			{
				return this._TYPE;
			}
			set
			{
				if ((this._TYPE != value))
				{
					this._TYPE = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Bank")]
	public partial class Bank : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _Name;
		
		private string _Branch;
		
		private string _BranchCode;
		
		private string _TelephoneNumber;
		
		private string _EmailAddress;
		
		private EntitySet<BankAccount> _BankAccounts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnBranchChanging(string value);
    partial void OnBranchChanged();
    partial void OnBranchCodeChanging(string value);
    partial void OnBranchCodeChanged();
    partial void OnTelephoneNumberChanging(string value);
    partial void OnTelephoneNumberChanged();
    partial void OnEmailAddressChanging(string value);
    partial void OnEmailAddressChanged();
    #endregion
		
		public Bank()
		{
			this._BankAccounts = new EntitySet<BankAccount>(new Action<BankAccount>(this.attach_BankAccounts), new Action<BankAccount>(this.detach_BankAccounts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Branch", DbType="NVarChar(MAX)")]
		public string Branch
		{
			get
			{
				return this._Branch;
			}
			set
			{
				if ((this._Branch != value))
				{
					this.OnBranchChanging(value);
					this.SendPropertyChanging();
					this._Branch = value;
					this.SendPropertyChanged("Branch");
					this.OnBranchChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BranchCode", DbType="NVarChar(MAX)")]
		public string BranchCode
		{
			get
			{
				return this._BranchCode;
			}
			set
			{
				if ((this._BranchCode != value))
				{
					this.OnBranchCodeChanging(value);
					this.SendPropertyChanging();
					this._BranchCode = value;
					this.SendPropertyChanged("BranchCode");
					this.OnBranchCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TelephoneNumber", DbType="NVarChar(MAX)")]
		public string TelephoneNumber
		{
			get
			{
				return this._TelephoneNumber;
			}
			set
			{
				if ((this._TelephoneNumber != value))
				{
					this.OnTelephoneNumberChanging(value);
					this.SendPropertyChanging();
					this._TelephoneNumber = value;
					this.SendPropertyChanged("TelephoneNumber");
					this.OnTelephoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailAddress", DbType="NVarChar(MAX)")]
		public string EmailAddress
		{
			get
			{
				return this._EmailAddress;
			}
			set
			{
				if ((this._EmailAddress != value))
				{
					this.OnEmailAddressChanging(value);
					this.SendPropertyChanging();
					this._EmailAddress = value;
					this.SendPropertyChanged("EmailAddress");
					this.OnEmailAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bank_BankAccount", Storage="_BankAccounts", ThisKey="id", OtherKey="BankId")]
		public EntitySet<BankAccount> BankAccounts
		{
			get
			{
				return this._BankAccounts;
			}
			set
			{
				this._BankAccounts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BankAccounts(BankAccount entity)
		{
			this.SendPropertyChanging();
			entity.Bank = this;
		}
		
		private void detach_BankAccounts(BankAccount entity)
		{
			this.SendPropertyChanging();
			entity.Bank = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ChartOfAccounts")]
	public partial class ChartOfAccount : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _num;
		
		private string _name;
		
		private string _type;
		
		private System.Nullable<System.DateTime> _e_date;
		
		private EntityRef<Ledger> _Ledger;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnumChanging(string value);
    partial void OnnumChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OntypeChanging(string value);
    partial void OntypeChanged();
    partial void One_dateChanging(System.Nullable<System.DateTime> value);
    partial void One_dateChanged();
    #endregion
		
		public ChartOfAccount()
		{
			this._Ledger = default(EntityRef<Ledger>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_num", DbType="NVarChar(50)")]
		public string num
		{
			get
			{
				return this._num;
			}
			set
			{
				if ((this._num != value))
				{
					this.OnnumChanging(value);
					this.SendPropertyChanging();
					this._num = value;
					this.SendPropertyChanged("num");
					this.OnnumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(MAX)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="NVarChar(50)")]
		public string type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					if (this._Ledger.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_e_date", DbType="Date")]
		public System.Nullable<System.DateTime> e_date
		{
			get
			{
				return this._e_date;
			}
			set
			{
				if ((this._e_date != value))
				{
					this.One_dateChanging(value);
					this.SendPropertyChanging();
					this._e_date = value;
					this.SendPropertyChanged("e_date");
					this.One_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ledger_ChartOfAccount", Storage="_Ledger", ThisKey="type", OtherKey="type", IsForeignKey=true)]
		public Ledger Ledger
		{
			get
			{
				return this._Ledger.Entity;
			}
			set
			{
				Ledger previousValue = this._Ledger.Entity;
				if (((previousValue != value) 
							|| (this._Ledger.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Ledger.Entity = null;
						previousValue.ChartOfAccounts.Remove(this);
					}
					this._Ledger.Entity = value;
					if ((value != null))
					{
						value.ChartOfAccounts.Add(this);
						this._type = value.type;
					}
					else
					{
						this._type = default(string);
					}
					this.SendPropertyChanged("Ledger");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ClientTypes")]
	public partial class ClientType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _Name;
		
		private EntitySet<Client> _Clients;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public ClientType()
		{
			this._Clients = new EntitySet<Client>(new Action<Client>(this.attach_Clients), new Action<Client>(this.detach_Clients));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClientType_Client", Storage="_Clients", ThisKey="id", OtherKey="ClientTypeId")]
		public EntitySet<Client> Clients
		{
			get
			{
				return this._Clients;
			}
			set
			{
				this._Clients.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Clients(Client entity)
		{
			this.SendPropertyChanging();
			entity.ClientType = this;
		}
		
		private void detach_Clients(Client entity)
		{
			this.SendPropertyChanging();
			entity.ClientType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Department")]
	public partial class Department : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _Name;
		
		private string _Address;
		
		private EntitySet<HOD> _HODs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    #endregion
		
		public Department()
		{
			this._HODs = new EntitySet<HOD>(new Action<HOD>(this.attach_HODs), new Action<HOD>(this.detach_HODs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(MAX)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_HOD", Storage="_HODs", ThisKey="id", OtherKey="DepartmentId")]
		public EntitySet<HOD> HODs
		{
			get
			{
				return this._HODs;
			}
			set
			{
				this._HODs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_HODs(HOD entity)
		{
			this.SendPropertyChanging();
			entity.Department = this;
		}
		
		private void detach_HODs(HOD entity)
		{
			this.SendPropertyChanging();
			entity.Department = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HOD")]
	public partial class HOD : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _EmployeeId;
		
		private System.Nullable<int> _DepartmentId;
		
		private EntityRef<Department> _Department;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnEmployeeIdChanging(System.Nullable<int> value);
    partial void OnEmployeeIdChanged();
    partial void OnDepartmentIdChanging(System.Nullable<int> value);
    partial void OnDepartmentIdChanged();
    #endregion
		
		public HOD()
		{
			this._Department = default(EntityRef<Department>);
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeId", DbType="Int")]
		public System.Nullable<int> EmployeeId
		{
			get
			{
				return this._EmployeeId;
			}
			set
			{
				if ((this._EmployeeId != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIdChanging(value);
					this.SendPropertyChanging();
					this._EmployeeId = value;
					this.SendPropertyChanged("EmployeeId");
					this.OnEmployeeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentId", DbType="Int")]
		public System.Nullable<int> DepartmentId
		{
			get
			{
				return this._DepartmentId;
			}
			set
			{
				if ((this._DepartmentId != value))
				{
					if (this._Department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentIdChanging(value);
					this.SendPropertyChanging();
					this._DepartmentId = value;
					this.SendPropertyChanged("DepartmentId");
					this.OnDepartmentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_HOD", Storage="_Department", ThisKey="DepartmentId", OtherKey="id", IsForeignKey=true)]
		public Department Department
		{
			get
			{
				return this._Department.Entity;
			}
			set
			{
				Department previousValue = this._Department.Entity;
				if (((previousValue != value) 
							|| (this._Department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department.Entity = null;
						previousValue.HODs.Remove(this);
					}
					this._Department.Entity = value;
					if ((value != null))
					{
						value.HODs.Add(this);
						this._DepartmentId = value.id;
					}
					else
					{
						this._DepartmentId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Department");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_HOD", Storage="_Employee", ThisKey="EmployeeId", OtherKey="id", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.HODs.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.HODs.Add(this);
						this._EmployeeId = value.id;
					}
					else
					{
						this._EmployeeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.IncomeStatement")]
	public partial class IncomeStatement
	{
		
		private string _Type;
		
		private string _AccountId;
		
		private string _AccountName;
		
		private System.Nullable<double> _value;
		
		private System.Nullable<double> _NetProfit;
		
		public IncomeStatement()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(50)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this._Type = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", DbType="NVarChar(50)")]
		public string AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					this._AccountId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountName", DbType="NVarChar(50)")]
		public string AccountName
		{
			get
			{
				return this._AccountName;
			}
			set
			{
				if ((this._AccountName != value))
				{
					this._AccountName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_value", DbType="Float")]
		public System.Nullable<double> value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this._value = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NetProfit", DbType="Float")]
		public System.Nullable<double> NetProfit
		{
			get
			{
				return this._NetProfit;
			}
			set
			{
				if ((this._NetProfit != value))
				{
					this._NetProfit = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InvoiceDetails")]
	public partial class InvoiceDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _InvoiceId;
		
		private System.Nullable<int> _OrderId;
		
		private System.Nullable<int> _VendorId;
		
		private System.Nullable<int> _CustomerId;
		
		private EntitySet<InvoiceItem> _InvoiceItems;
		
		private EntityRef<Invoice> _Invoice;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnInvoiceIdChanging(System.Nullable<int> value);
    partial void OnInvoiceIdChanged();
    partial void OnOrderIdChanging(System.Nullable<int> value);
    partial void OnOrderIdChanged();
    partial void OnVendorIdChanging(System.Nullable<int> value);
    partial void OnVendorIdChanged();
    partial void OnCustomerIdChanging(System.Nullable<int> value);
    partial void OnCustomerIdChanged();
    #endregion
		
		public InvoiceDetail()
		{
			this._InvoiceItems = new EntitySet<InvoiceItem>(new Action<InvoiceItem>(this.attach_InvoiceItems), new Action<InvoiceItem>(this.detach_InvoiceItems));
			this._Invoice = default(EntityRef<Invoice>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceId", DbType="Int")]
		public System.Nullable<int> InvoiceId
		{
			get
			{
				return this._InvoiceId;
			}
			set
			{
				if ((this._InvoiceId != value))
				{
					if (this._Invoice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInvoiceIdChanging(value);
					this.SendPropertyChanging();
					this._InvoiceId = value;
					this.SendPropertyChanged("InvoiceId");
					this.OnInvoiceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderId", DbType="Int")]
		public System.Nullable<int> OrderId
		{
			get
			{
				return this._OrderId;
			}
			set
			{
				if ((this._OrderId != value))
				{
					this.OnOrderIdChanging(value);
					this.SendPropertyChanging();
					this._OrderId = value;
					this.SendPropertyChanged("OrderId");
					this.OnOrderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VendorId", DbType="Int")]
		public System.Nullable<int> VendorId
		{
			get
			{
				return this._VendorId;
			}
			set
			{
				if ((this._VendorId != value))
				{
					this.OnVendorIdChanging(value);
					this.SendPropertyChanging();
					this._VendorId = value;
					this.SendPropertyChanged("VendorId");
					this.OnVendorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerId", DbType="Int")]
		public System.Nullable<int> CustomerId
		{
			get
			{
				return this._CustomerId;
			}
			set
			{
				if ((this._CustomerId != value))
				{
					this.OnCustomerIdChanging(value);
					this.SendPropertyChanging();
					this._CustomerId = value;
					this.SendPropertyChanged("CustomerId");
					this.OnCustomerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InvoiceDetail_InvoiceItem", Storage="_InvoiceItems", ThisKey="id", OtherKey="InvoicedetailId")]
		public EntitySet<InvoiceItem> InvoiceItems
		{
			get
			{
				return this._InvoiceItems;
			}
			set
			{
				this._InvoiceItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Invoice_InvoiceDetail", Storage="_Invoice", ThisKey="InvoiceId", OtherKey="id", IsForeignKey=true)]
		public Invoice Invoice
		{
			get
			{
				return this._Invoice.Entity;
			}
			set
			{
				Invoice previousValue = this._Invoice.Entity;
				if (((previousValue != value) 
							|| (this._Invoice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Invoice.Entity = null;
						previousValue.InvoiceDetails.Remove(this);
					}
					this._Invoice.Entity = value;
					if ((value != null))
					{
						value.InvoiceDetails.Add(this);
						this._InvoiceId = value.id;
					}
					else
					{
						this._InvoiceId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Invoice");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_InvoiceItems(InvoiceItem entity)
		{
			this.SendPropertyChanging();
			entity.InvoiceDetail = this;
		}
		
		private void detach_InvoiceItems(InvoiceItem entity)
		{
			this.SendPropertyChanging();
			entity.InvoiceDetail = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InvoiceItems")]
	public partial class InvoiceItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _InvoicedetailId;
		
		private System.Nullable<int> _ProductId;
		
		private string _ProductCost;
		
		private EntityRef<InvoiceDetail> _InvoiceDetail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnInvoicedetailIdChanging(System.Nullable<int> value);
    partial void OnInvoicedetailIdChanged();
    partial void OnProductIdChanging(System.Nullable<int> value);
    partial void OnProductIdChanged();
    partial void OnProductCostChanging(string value);
    partial void OnProductCostChanged();
    #endregion
		
		public InvoiceItem()
		{
			this._InvoiceDetail = default(EntityRef<InvoiceDetail>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoicedetailId", DbType="Int")]
		public System.Nullable<int> InvoicedetailId
		{
			get
			{
				return this._InvoicedetailId;
			}
			set
			{
				if ((this._InvoicedetailId != value))
				{
					if (this._InvoiceDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInvoicedetailIdChanging(value);
					this.SendPropertyChanging();
					this._InvoicedetailId = value;
					this.SendPropertyChanged("InvoicedetailId");
					this.OnInvoicedetailIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductId", DbType="Int")]
		public System.Nullable<int> ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductCost", DbType="NChar(10)")]
		public string ProductCost
		{
			get
			{
				return this._ProductCost;
			}
			set
			{
				if ((this._ProductCost != value))
				{
					this.OnProductCostChanging(value);
					this.SendPropertyChanging();
					this._ProductCost = value;
					this.SendPropertyChanged("ProductCost");
					this.OnProductCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InvoiceDetail_InvoiceItem", Storage="_InvoiceDetail", ThisKey="InvoicedetailId", OtherKey="id", IsForeignKey=true)]
		public InvoiceDetail InvoiceDetail
		{
			get
			{
				return this._InvoiceDetail.Entity;
			}
			set
			{
				InvoiceDetail previousValue = this._InvoiceDetail.Entity;
				if (((previousValue != value) 
							|| (this._InvoiceDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._InvoiceDetail.Entity = null;
						previousValue.InvoiceItems.Remove(this);
					}
					this._InvoiceDetail.Entity = value;
					if ((value != null))
					{
						value.InvoiceItems.Add(this);
						this._InvoicedetailId = value.id;
					}
					else
					{
						this._InvoicedetailId = default(Nullable<int>);
					}
					this.SendPropertyChanged("InvoiceDetail");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InvoicePayment")]
	public partial class InvoicePayment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _InvoiceId;
		
		private string _Payment;
		
		private string _Total;
		
		private string _Remaining;
		
		private EntityRef<Invoice> _Invoice;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnInvoiceIdChanging(System.Nullable<int> value);
    partial void OnInvoiceIdChanged();
    partial void OnPaymentChanging(string value);
    partial void OnPaymentChanged();
    partial void OnTotalChanging(string value);
    partial void OnTotalChanged();
    partial void OnRemainingChanging(string value);
    partial void OnRemainingChanged();
    #endregion
		
		public InvoicePayment()
		{
			this._Invoice = default(EntityRef<Invoice>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceId", DbType="Int")]
		public System.Nullable<int> InvoiceId
		{
			get
			{
				return this._InvoiceId;
			}
			set
			{
				if ((this._InvoiceId != value))
				{
					if (this._Invoice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInvoiceIdChanging(value);
					this.SendPropertyChanging();
					this._InvoiceId = value;
					this.SendPropertyChanged("InvoiceId");
					this.OnInvoiceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Payment", DbType="NVarChar(MAX)")]
		public string Payment
		{
			get
			{
				return this._Payment;
			}
			set
			{
				if ((this._Payment != value))
				{
					this.OnPaymentChanging(value);
					this.SendPropertyChanging();
					this._Payment = value;
					this.SendPropertyChanged("Payment");
					this.OnPaymentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Total", DbType="NVarChar(MAX)")]
		public string Total
		{
			get
			{
				return this._Total;
			}
			set
			{
				if ((this._Total != value))
				{
					this.OnTotalChanging(value);
					this.SendPropertyChanging();
					this._Total = value;
					this.SendPropertyChanged("Total");
					this.OnTotalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remaining", DbType="NVarChar(MAX)")]
		public string Remaining
		{
			get
			{
				return this._Remaining;
			}
			set
			{
				if ((this._Remaining != value))
				{
					this.OnRemainingChanging(value);
					this.SendPropertyChanging();
					this._Remaining = value;
					this.SendPropertyChanged("Remaining");
					this.OnRemainingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Invoice_InvoicePayment", Storage="_Invoice", ThisKey="InvoiceId", OtherKey="id", IsForeignKey=true)]
		public Invoice Invoice
		{
			get
			{
				return this._Invoice.Entity;
			}
			set
			{
				Invoice previousValue = this._Invoice.Entity;
				if (((previousValue != value) 
							|| (this._Invoice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Invoice.Entity = null;
						previousValue.InvoicePayments.Remove(this);
					}
					this._Invoice.Entity = value;
					if ((value != null))
					{
						value.InvoicePayments.Add(this);
						this._InvoiceId = value.id;
					}
					else
					{
						this._InvoiceId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Invoice");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Invoices")]
	public partial class Invoice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _InvoiceType;
		
		private string _InvoiceTotal;
		
		private string _InvoiceDate;
		
		private System.Nullable<int> _FiscalYeadId;
		
		private EntitySet<InvoiceDetail> _InvoiceDetails;
		
		private EntitySet<InvoicePayment> _InvoicePayments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnInvoiceTypeChanging(string value);
    partial void OnInvoiceTypeChanged();
    partial void OnInvoiceTotalChanging(string value);
    partial void OnInvoiceTotalChanged();
    partial void OnInvoiceDateChanging(string value);
    partial void OnInvoiceDateChanged();
    partial void OnFiscalYeadIdChanging(System.Nullable<int> value);
    partial void OnFiscalYeadIdChanged();
    #endregion
		
		public Invoice()
		{
			this._InvoiceDetails = new EntitySet<InvoiceDetail>(new Action<InvoiceDetail>(this.attach_InvoiceDetails), new Action<InvoiceDetail>(this.detach_InvoiceDetails));
			this._InvoicePayments = new EntitySet<InvoicePayment>(new Action<InvoicePayment>(this.attach_InvoicePayments), new Action<InvoicePayment>(this.detach_InvoicePayments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceType", DbType="NVarChar(MAX)")]
		public string InvoiceType
		{
			get
			{
				return this._InvoiceType;
			}
			set
			{
				if ((this._InvoiceType != value))
				{
					this.OnInvoiceTypeChanging(value);
					this.SendPropertyChanging();
					this._InvoiceType = value;
					this.SendPropertyChanged("InvoiceType");
					this.OnInvoiceTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceTotal", DbType="NVarChar(MAX)")]
		public string InvoiceTotal
		{
			get
			{
				return this._InvoiceTotal;
			}
			set
			{
				if ((this._InvoiceTotal != value))
				{
					this.OnInvoiceTotalChanging(value);
					this.SendPropertyChanging();
					this._InvoiceTotal = value;
					this.SendPropertyChanged("InvoiceTotal");
					this.OnInvoiceTotalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceDate", DbType="NVarChar(MAX)")]
		public string InvoiceDate
		{
			get
			{
				return this._InvoiceDate;
			}
			set
			{
				if ((this._InvoiceDate != value))
				{
					this.OnInvoiceDateChanging(value);
					this.SendPropertyChanging();
					this._InvoiceDate = value;
					this.SendPropertyChanged("InvoiceDate");
					this.OnInvoiceDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FiscalYeadId", DbType="Int")]
		public System.Nullable<int> FiscalYeadId
		{
			get
			{
				return this._FiscalYeadId;
			}
			set
			{
				if ((this._FiscalYeadId != value))
				{
					this.OnFiscalYeadIdChanging(value);
					this.SendPropertyChanging();
					this._FiscalYeadId = value;
					this.SendPropertyChanged("FiscalYeadId");
					this.OnFiscalYeadIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Invoice_InvoiceDetail", Storage="_InvoiceDetails", ThisKey="id", OtherKey="InvoiceId")]
		public EntitySet<InvoiceDetail> InvoiceDetails
		{
			get
			{
				return this._InvoiceDetails;
			}
			set
			{
				this._InvoiceDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Invoice_InvoicePayment", Storage="_InvoicePayments", ThisKey="id", OtherKey="InvoiceId")]
		public EntitySet<InvoicePayment> InvoicePayments
		{
			get
			{
				return this._InvoicePayments;
			}
			set
			{
				this._InvoicePayments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_InvoiceDetails(InvoiceDetail entity)
		{
			this.SendPropertyChanging();
			entity.Invoice = this;
		}
		
		private void detach_InvoiceDetails(InvoiceDetail entity)
		{
			this.SendPropertyChanging();
			entity.Invoice = null;
		}
		
		private void attach_InvoicePayments(InvoicePayment entity)
		{
			this.SendPropertyChanging();
			entity.Invoice = this;
		}
		
		private void detach_InvoicePayments(InvoicePayment entity)
		{
			this.SendPropertyChanging();
			entity.Invoice = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Journal")]
	public partial class Journal : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _acc_id;
		
		private System.Nullable<double> _amount;
		
		private string _des;
		
		private string _type;
		
		private System.Nullable<System.DateTime> _e_date;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onacc_idChanging(System.Nullable<int> value);
    partial void Onacc_idChanged();
    partial void OnamountChanging(System.Nullable<double> value);
    partial void OnamountChanged();
    partial void OndesChanging(string value);
    partial void OndesChanged();
    partial void OntypeChanging(string value);
    partial void OntypeChanged();
    partial void One_dateChanging(System.Nullable<System.DateTime> value);
    partial void One_dateChanged();
    #endregion
		
		public Journal()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_acc_id", DbType="Int")]
		public System.Nullable<int> acc_id
		{
			get
			{
				return this._acc_id;
			}
			set
			{
				if ((this._acc_id != value))
				{
					this.Onacc_idChanging(value);
					this.SendPropertyChanging();
					this._acc_id = value;
					this.SendPropertyChanged("acc_id");
					this.Onacc_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_amount", DbType="Float")]
		public System.Nullable<double> amount
		{
			get
			{
				return this._amount;
			}
			set
			{
				if ((this._amount != value))
				{
					this.OnamountChanging(value);
					this.SendPropertyChanging();
					this._amount = value;
					this.SendPropertyChanged("amount");
					this.OnamountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_des", DbType="NVarChar(MAX)")]
		public string des
		{
			get
			{
				return this._des;
			}
			set
			{
				if ((this._des != value))
				{
					this.OndesChanging(value);
					this.SendPropertyChanging();
					this._des = value;
					this.SendPropertyChanged("des");
					this.OndesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="NVarChar(MAX)")]
		public string type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_e_date", DbType="Date")]
		public System.Nullable<System.DateTime> e_date
		{
			get
			{
				return this._e_date;
			}
			set
			{
				if ((this._e_date != value))
				{
					this.One_dateChanging(value);
					this.SendPropertyChanging();
					this._e_date = value;
					this.SendPropertyChanged("e_date");
					this.One_dateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Ledgers")]
	public partial class Ledger : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _type;
		
		private System.Nullable<System.DateTime> _e_date;
		
		private EntitySet<ChartOfAccount> _ChartOfAccounts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntypeChanging(string value);
    partial void OntypeChanged();
    partial void One_dateChanging(System.Nullable<System.DateTime> value);
    partial void One_dateChanged();
    #endregion
		
		public Ledger()
		{
			this._ChartOfAccounts = new EntitySet<ChartOfAccount>(new Action<ChartOfAccount>(this.attach_ChartOfAccounts), new Action<ChartOfAccount>(this.detach_ChartOfAccounts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_e_date", DbType="Date")]
		public System.Nullable<System.DateTime> e_date
		{
			get
			{
				return this._e_date;
			}
			set
			{
				if ((this._e_date != value))
				{
					this.One_dateChanging(value);
					this.SendPropertyChanging();
					this._e_date = value;
					this.SendPropertyChanged("e_date");
					this.One_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ledger_ChartOfAccount", Storage="_ChartOfAccounts", ThisKey="type", OtherKey="type")]
		public EntitySet<ChartOfAccount> ChartOfAccounts
		{
			get
			{
				return this._ChartOfAccounts;
			}
			set
			{
				this._ChartOfAccounts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ChartOfAccounts(ChartOfAccount entity)
		{
			this.SendPropertyChanging();
			entity.Ledger = this;
		}
		
		private void detach_ChartOfAccounts(ChartOfAccount entity)
		{
			this.SendPropertyChanging();
			entity.Ledger = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OwnerEquity")]
	public partial class OwnerEquity
	{
		
		private System.Nullable<double> _OldCapital;
		
		private System.Nullable<double> _newcapital;
		
		private System.Nullable<double> _netincome;
		
		private System.Nullable<double> _ow;
		
		private System.Nullable<double> _finalcapital;
		
		private System.Nullable<System.DateTime> _fromDate;
		
		private System.Nullable<System.DateTime> _toDate;
		
		public OwnerEquity()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OldCapital", DbType="Float")]
		public System.Nullable<double> OldCapital
		{
			get
			{
				return this._OldCapital;
			}
			set
			{
				if ((this._OldCapital != value))
				{
					this._OldCapital = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_newcapital", DbType="Float")]
		public System.Nullable<double> newcapital
		{
			get
			{
				return this._newcapital;
			}
			set
			{
				if ((this._newcapital != value))
				{
					this._newcapital = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_netincome", DbType="Float")]
		public System.Nullable<double> netincome
		{
			get
			{
				return this._netincome;
			}
			set
			{
				if ((this._netincome != value))
				{
					this._netincome = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ow", DbType="Float")]
		public System.Nullable<double> ow
		{
			get
			{
				return this._ow;
			}
			set
			{
				if ((this._ow != value))
				{
					this._ow = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_finalcapital", DbType="Float")]
		public System.Nullable<double> finalcapital
		{
			get
			{
				return this._finalcapital;
			}
			set
			{
				if ((this._finalcapital != value))
				{
					this._finalcapital = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fromDate", DbType="Date")]
		public System.Nullable<System.DateTime> fromDate
		{
			get
			{
				return this._fromDate;
			}
			set
			{
				if ((this._fromDate != value))
				{
					this._fromDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_toDate", DbType="Date")]
		public System.Nullable<System.DateTime> toDate
		{
			get
			{
				return this._toDate;
			}
			set
			{
				if ((this._toDate != value))
				{
					this._toDate = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Payroll")]
	public partial class Payroll : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _EmpId;
		
		private System.Nullable<int> _SalaryId;
		
		private string _DateOfPay;
		
		private EntitySet<PayrollDetail> _PayrollDetails;
		
		private EntityRef<Salary> _Salary;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnEmpIdChanging(System.Nullable<int> value);
    partial void OnEmpIdChanged();
    partial void OnSalaryIdChanging(System.Nullable<int> value);
    partial void OnSalaryIdChanged();
    partial void OnDateOfPayChanging(string value);
    partial void OnDateOfPayChanged();
    #endregion
		
		public Payroll()
		{
			this._PayrollDetails = new EntitySet<PayrollDetail>(new Action<PayrollDetail>(this.attach_PayrollDetails), new Action<PayrollDetail>(this.detach_PayrollDetails));
			this._Salary = default(EntityRef<Salary>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmpId", DbType="Int")]
		public System.Nullable<int> EmpId
		{
			get
			{
				return this._EmpId;
			}
			set
			{
				if ((this._EmpId != value))
				{
					this.OnEmpIdChanging(value);
					this.SendPropertyChanging();
					this._EmpId = value;
					this.SendPropertyChanged("EmpId");
					this.OnEmpIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalaryId", DbType="Int")]
		public System.Nullable<int> SalaryId
		{
			get
			{
				return this._SalaryId;
			}
			set
			{
				if ((this._SalaryId != value))
				{
					if (this._Salary.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSalaryIdChanging(value);
					this.SendPropertyChanging();
					this._SalaryId = value;
					this.SendPropertyChanged("SalaryId");
					this.OnSalaryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfPay", DbType="NVarChar(MAX)")]
		public string DateOfPay
		{
			get
			{
				return this._DateOfPay;
			}
			set
			{
				if ((this._DateOfPay != value))
				{
					this.OnDateOfPayChanging(value);
					this.SendPropertyChanging();
					this._DateOfPay = value;
					this.SendPropertyChanged("DateOfPay");
					this.OnDateOfPayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Payroll_PayrollDetail", Storage="_PayrollDetails", ThisKey="id", OtherKey="PayrollId")]
		public EntitySet<PayrollDetail> PayrollDetails
		{
			get
			{
				return this._PayrollDetails;
			}
			set
			{
				this._PayrollDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Salary_Payroll", Storage="_Salary", ThisKey="SalaryId", OtherKey="id", IsForeignKey=true)]
		public Salary Salary
		{
			get
			{
				return this._Salary.Entity;
			}
			set
			{
				Salary previousValue = this._Salary.Entity;
				if (((previousValue != value) 
							|| (this._Salary.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Salary.Entity = null;
						previousValue.Payrolls.Remove(this);
					}
					this._Salary.Entity = value;
					if ((value != null))
					{
						value.Payrolls.Add(this);
						this._SalaryId = value.id;
					}
					else
					{
						this._SalaryId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Salary");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PayrollDetails(PayrollDetail entity)
		{
			this.SendPropertyChanging();
			entity.Payroll = this;
		}
		
		private void detach_PayrollDetails(PayrollDetail entity)
		{
			this.SendPropertyChanging();
			entity.Payroll = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PayrollDetails")]
	public partial class PayrollDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _PayrollId;
		
		private string _LastMonthPaid;
		
		private EntityRef<Payroll> _Payroll;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnPayrollIdChanging(System.Nullable<int> value);
    partial void OnPayrollIdChanged();
    partial void OnLastMonthPaidChanging(string value);
    partial void OnLastMonthPaidChanged();
    #endregion
		
		public PayrollDetail()
		{
			this._Payroll = default(EntityRef<Payroll>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PayrollId", DbType="Int")]
		public System.Nullable<int> PayrollId
		{
			get
			{
				return this._PayrollId;
			}
			set
			{
				if ((this._PayrollId != value))
				{
					if (this._Payroll.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPayrollIdChanging(value);
					this.SendPropertyChanging();
					this._PayrollId = value;
					this.SendPropertyChanged("PayrollId");
					this.OnPayrollIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastMonthPaid", DbType="NVarChar(MAX)")]
		public string LastMonthPaid
		{
			get
			{
				return this._LastMonthPaid;
			}
			set
			{
				if ((this._LastMonthPaid != value))
				{
					this.OnLastMonthPaidChanging(value);
					this.SendPropertyChanging();
					this._LastMonthPaid = value;
					this.SendPropertyChanged("LastMonthPaid");
					this.OnLastMonthPaidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Payroll_PayrollDetail", Storage="_Payroll", ThisKey="PayrollId", OtherKey="id", IsForeignKey=true)]
		public Payroll Payroll
		{
			get
			{
				return this._Payroll.Entity;
			}
			set
			{
				Payroll previousValue = this._Payroll.Entity;
				if (((previousValue != value) 
							|| (this._Payroll.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Payroll.Entity = null;
						previousValue.PayrollDetails.Remove(this);
					}
					this._Payroll.Entity = value;
					if ((value != null))
					{
						value.PayrollDetails.Add(this);
						this._PayrollId = value.id;
					}
					else
					{
						this._PayrollId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Payroll");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Permissions")]
	public partial class Permission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _RoleID;
		
		private string _Permission1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnRoleIDChanging(System.Nullable<int> value);
    partial void OnRoleIDChanged();
    partial void OnPermission1Changing(string value);
    partial void OnPermission1Changed();
    #endregion
		
		public Permission()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", DbType="Int")]
		public System.Nullable<int> RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Permission", Storage="_Permission1", DbType="NVarChar(MAX)")]
		public string Permission1
		{
			get
			{
				return this._Permission1;
			}
			set
			{
				if ((this._Permission1 != value))
				{
					this.OnPermission1Changing(value);
					this.SendPropertyChanging();
					this._Permission1 = value;
					this.SendPropertyChanged("Permission1");
					this.OnPermission1Changed();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Postings")]
	public partial class Posting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _acc_id;
		
		private string _acc_num;
		
		private string _type;
		
		private System.Nullable<double> _amount;
		
		private System.Nullable<System.DateTime> _e_date;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onacc_idChanging(System.Nullable<int> value);
    partial void Onacc_idChanged();
    partial void Onacc_numChanging(string value);
    partial void Onacc_numChanged();
    partial void OntypeChanging(string value);
    partial void OntypeChanged();
    partial void OnamountChanging(System.Nullable<double> value);
    partial void OnamountChanged();
    partial void One_dateChanging(System.Nullable<System.DateTime> value);
    partial void One_dateChanged();
    #endregion
		
		public Posting()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_acc_id", DbType="Int")]
		public System.Nullable<int> acc_id
		{
			get
			{
				return this._acc_id;
			}
			set
			{
				if ((this._acc_id != value))
				{
					this.Onacc_idChanging(value);
					this.SendPropertyChanging();
					this._acc_id = value;
					this.SendPropertyChanged("acc_id");
					this.Onacc_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_acc_num", DbType="NVarChar(50)")]
		public string acc_num
		{
			get
			{
				return this._acc_num;
			}
			set
			{
				if ((this._acc_num != value))
				{
					this.Onacc_numChanging(value);
					this.SendPropertyChanging();
					this._acc_num = value;
					this.SendPropertyChanged("acc_num");
					this.Onacc_numChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="NVarChar(MAX)")]
		public string type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_amount", DbType="Float")]
		public System.Nullable<double> amount
		{
			get
			{
				return this._amount;
			}
			set
			{
				if ((this._amount != value))
				{
					this.OnamountChanging(value);
					this.SendPropertyChanging();
					this._amount = value;
					this.SendPropertyChanged("amount");
					this.OnamountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_e_date", DbType="Date")]
		public System.Nullable<System.DateTime> e_date
		{
			get
			{
				return this._e_date;
			}
			set
			{
				if ((this._e_date != value))
				{
					this.One_dateChanging(value);
					this.SendPropertyChanging();
					this._e_date = value;
					this.SendPropertyChanged("e_date");
					this.One_dateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Roles")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _RoleName;
		
		private EntitySet<UserRolesContainer> _UserRolesContainers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnRoleNameChanging(string value);
    partial void OnRoleNameChanged();
    #endregion
		
		public Role()
		{
			this._UserRolesContainers = new EntitySet<UserRolesContainer>(new Action<UserRolesContainer>(this.attach_UserRolesContainers), new Action<UserRolesContainer>(this.detach_UserRolesContainers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleName", DbType="NVarChar(MAX)")]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if ((this._RoleName != value))
				{
					this.OnRoleNameChanging(value);
					this.SendPropertyChanging();
					this._RoleName = value;
					this.SendPropertyChanged("RoleName");
					this.OnRoleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_UserRolesContainer", Storage="_UserRolesContainers", ThisKey="id", OtherKey="RolesId")]
		public EntitySet<UserRolesContainer> UserRolesContainers
		{
			get
			{
				return this._UserRolesContainers;
			}
			set
			{
				this._UserRolesContainers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserRolesContainers(UserRolesContainer entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_UserRolesContainers(UserRolesContainer entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Salary")]
	public partial class Salary : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _Salary1;
		
		private string _DesignationId;
		
		private EntitySet<Payroll> _Payrolls;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnSalary1Changing(string value);
    partial void OnSalary1Changed();
    partial void OnDesignationIdChanging(string value);
    partial void OnDesignationIdChanged();
    #endregion
		
		public Salary()
		{
			this._Payrolls = new EntitySet<Payroll>(new Action<Payroll>(this.attach_Payrolls), new Action<Payroll>(this.detach_Payrolls));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Salary", Storage="_Salary1", DbType="NVarChar(MAX)")]
		public string Salary1
		{
			get
			{
				return this._Salary1;
			}
			set
			{
				if ((this._Salary1 != value))
				{
					this.OnSalary1Changing(value);
					this.SendPropertyChanging();
					this._Salary1 = value;
					this.SendPropertyChanged("Salary1");
					this.OnSalary1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DesignationId", DbType="NVarChar(MAX)")]
		public string DesignationId
		{
			get
			{
				return this._DesignationId;
			}
			set
			{
				if ((this._DesignationId != value))
				{
					this.OnDesignationIdChanging(value);
					this.SendPropertyChanging();
					this._DesignationId = value;
					this.SendPropertyChanged("DesignationId");
					this.OnDesignationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Salary_Payroll", Storage="_Payrolls", ThisKey="id", OtherKey="SalaryId")]
		public EntitySet<Payroll> Payrolls
		{
			get
			{
				return this._Payrolls;
			}
			set
			{
				this._Payrolls.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Payrolls(Payroll entity)
		{
			this.SendPropertyChanging();
			entity.Salary = this;
		}
		
		private void detach_Payrolls(Payroll entity)
		{
			this.SendPropertyChanging();
			entity.Salary = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SaleTypes")]
	public partial class SaleType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public SaleType()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(MAX)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Transaction]")]
	public partial class Transaction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _TransactionDetails;
		
		private string _TransactionType;
		
		private System.Nullable<int> _OrderId;
		
		private System.Nullable<int> _ClientId;
		
		private System.Nullable<int> _VendorId;
		
		private System.Nullable<int> _FiscalYearId;
		
		private System.Nullable<System.DateTime> _eDate;
		
		private EntitySet<TransactionDetail> _TransactionDetails1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnTransactionDetailsChanging(string value);
    partial void OnTransactionDetailsChanged();
    partial void OnTransactionTypeChanging(string value);
    partial void OnTransactionTypeChanged();
    partial void OnOrderIdChanging(System.Nullable<int> value);
    partial void OnOrderIdChanged();
    partial void OnClientIdChanging(System.Nullable<int> value);
    partial void OnClientIdChanged();
    partial void OnVendorIdChanging(System.Nullable<int> value);
    partial void OnVendorIdChanged();
    partial void OnFiscalYearIdChanging(System.Nullable<int> value);
    partial void OnFiscalYearIdChanged();
    partial void OneDateChanging(System.Nullable<System.DateTime> value);
    partial void OneDateChanged();
    #endregion
		
		public Transaction()
		{
			this._TransactionDetails1 = new EntitySet<TransactionDetail>(new Action<TransactionDetail>(this.attach_TransactionDetails1), new Action<TransactionDetail>(this.detach_TransactionDetails1));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionDetails", DbType="NVarChar(MAX)")]
		public string TransactionDetails
		{
			get
			{
				return this._TransactionDetails;
			}
			set
			{
				if ((this._TransactionDetails != value))
				{
					this.OnTransactionDetailsChanging(value);
					this.SendPropertyChanging();
					this._TransactionDetails = value;
					this.SendPropertyChanged("TransactionDetails");
					this.OnTransactionDetailsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionType", DbType="NVarChar(MAX)")]
		public string TransactionType
		{
			get
			{
				return this._TransactionType;
			}
			set
			{
				if ((this._TransactionType != value))
				{
					this.OnTransactionTypeChanging(value);
					this.SendPropertyChanging();
					this._TransactionType = value;
					this.SendPropertyChanged("TransactionType");
					this.OnTransactionTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderId", DbType="Int")]
		public System.Nullable<int> OrderId
		{
			get
			{
				return this._OrderId;
			}
			set
			{
				if ((this._OrderId != value))
				{
					this.OnOrderIdChanging(value);
					this.SendPropertyChanging();
					this._OrderId = value;
					this.SendPropertyChanged("OrderId");
					this.OnOrderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientId", DbType="Int")]
		public System.Nullable<int> ClientId
		{
			get
			{
				return this._ClientId;
			}
			set
			{
				if ((this._ClientId != value))
				{
					this.OnClientIdChanging(value);
					this.SendPropertyChanging();
					this._ClientId = value;
					this.SendPropertyChanged("ClientId");
					this.OnClientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VendorId", DbType="Int")]
		public System.Nullable<int> VendorId
		{
			get
			{
				return this._VendorId;
			}
			set
			{
				if ((this._VendorId != value))
				{
					this.OnVendorIdChanging(value);
					this.SendPropertyChanging();
					this._VendorId = value;
					this.SendPropertyChanged("VendorId");
					this.OnVendorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FiscalYearId", DbType="Int")]
		public System.Nullable<int> FiscalYearId
		{
			get
			{
				return this._FiscalYearId;
			}
			set
			{
				if ((this._FiscalYearId != value))
				{
					this.OnFiscalYearIdChanging(value);
					this.SendPropertyChanging();
					this._FiscalYearId = value;
					this.SendPropertyChanged("FiscalYearId");
					this.OnFiscalYearIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_eDate", DbType="Date")]
		public System.Nullable<System.DateTime> eDate
		{
			get
			{
				return this._eDate;
			}
			set
			{
				if ((this._eDate != value))
				{
					this.OneDateChanging(value);
					this.SendPropertyChanging();
					this._eDate = value;
					this.SendPropertyChanged("eDate");
					this.OneDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Transaction_TransactionDetail", Storage="_TransactionDetails1", ThisKey="id", OtherKey="TransactionId")]
		public EntitySet<TransactionDetail> TransactionDetails1
		{
			get
			{
				return this._TransactionDetails1;
			}
			set
			{
				this._TransactionDetails1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TransactionDetails1(TransactionDetail entity)
		{
			this.SendPropertyChanging();
			entity.Transaction = this;
		}
		
		private void detach_TransactionDetails1(TransactionDetail entity)
		{
			this.SendPropertyChanging();
			entity.Transaction = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TransactionDetail")]
	public partial class TransactionDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _TransactionId;
		
		private System.Nullable<int> _ProductId;
		
		private System.Nullable<int> _FromWareHouseId;
		
		private System.Nullable<int> _ToWareHouseId;
		
		private string _TransactionQuantity;
		
		private string _TransactionCost;
		
		private string _TotalCost;
		
		private System.Nullable<System.DateTime> _eDate;
		
		private EntityRef<Transaction> _Transaction;
		
		private EntityRef<WareHouse> _WareHouse;
		
		private EntityRef<WareHouse> _WareHouse1;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnTransactionIdChanging(System.Nullable<int> value);
    partial void OnTransactionIdChanged();
    partial void OnProductIdChanging(System.Nullable<int> value);
    partial void OnProductIdChanged();
    partial void OnFromWareHouseIdChanging(System.Nullable<int> value);
    partial void OnFromWareHouseIdChanged();
    partial void OnToWareHouseIdChanging(System.Nullable<int> value);
    partial void OnToWareHouseIdChanged();
    partial void OnTransactionQuantityChanging(string value);
    partial void OnTransactionQuantityChanged();
    partial void OnTransactionCostChanging(string value);
    partial void OnTransactionCostChanged();
    partial void OnTotalCostChanging(string value);
    partial void OnTotalCostChanged();
    partial void OneDateChanging(System.Nullable<System.DateTime> value);
    partial void OneDateChanged();
    #endregion
		
		public TransactionDetail()
		{
			this._Transaction = default(EntityRef<Transaction>);
			this._WareHouse = default(EntityRef<WareHouse>);
			this._WareHouse1 = default(EntityRef<WareHouse>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionId", DbType="Int")]
		public System.Nullable<int> TransactionId
		{
			get
			{
				return this._TransactionId;
			}
			set
			{
				if ((this._TransactionId != value))
				{
					if (this._Transaction.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTransactionIdChanging(value);
					this.SendPropertyChanging();
					this._TransactionId = value;
					this.SendPropertyChanged("TransactionId");
					this.OnTransactionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductId", DbType="Int")]
		public System.Nullable<int> ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FromWareHouseId", DbType="Int")]
		public System.Nullable<int> FromWareHouseId
		{
			get
			{
				return this._FromWareHouseId;
			}
			set
			{
				if ((this._FromWareHouseId != value))
				{
					if (this._WareHouse.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFromWareHouseIdChanging(value);
					this.SendPropertyChanging();
					this._FromWareHouseId = value;
					this.SendPropertyChanged("FromWareHouseId");
					this.OnFromWareHouseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToWareHouseId", DbType="Int")]
		public System.Nullable<int> ToWareHouseId
		{
			get
			{
				return this._ToWareHouseId;
			}
			set
			{
				if ((this._ToWareHouseId != value))
				{
					if (this._WareHouse1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnToWareHouseIdChanging(value);
					this.SendPropertyChanging();
					this._ToWareHouseId = value;
					this.SendPropertyChanged("ToWareHouseId");
					this.OnToWareHouseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionQuantity", DbType="NVarChar(MAX)")]
		public string TransactionQuantity
		{
			get
			{
				return this._TransactionQuantity;
			}
			set
			{
				if ((this._TransactionQuantity != value))
				{
					this.OnTransactionQuantityChanging(value);
					this.SendPropertyChanging();
					this._TransactionQuantity = value;
					this.SendPropertyChanged("TransactionQuantity");
					this.OnTransactionQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionCost", DbType="NVarChar(MAX)")]
		public string TransactionCost
		{
			get
			{
				return this._TransactionCost;
			}
			set
			{
				if ((this._TransactionCost != value))
				{
					this.OnTransactionCostChanging(value);
					this.SendPropertyChanging();
					this._TransactionCost = value;
					this.SendPropertyChanged("TransactionCost");
					this.OnTransactionCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalCost", DbType="NVarChar(MAX)")]
		public string TotalCost
		{
			get
			{
				return this._TotalCost;
			}
			set
			{
				if ((this._TotalCost != value))
				{
					this.OnTotalCostChanging(value);
					this.SendPropertyChanging();
					this._TotalCost = value;
					this.SendPropertyChanged("TotalCost");
					this.OnTotalCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_eDate", DbType="Date")]
		public System.Nullable<System.DateTime> eDate
		{
			get
			{
				return this._eDate;
			}
			set
			{
				if ((this._eDate != value))
				{
					this.OneDateChanging(value);
					this.SendPropertyChanging();
					this._eDate = value;
					this.SendPropertyChanged("eDate");
					this.OneDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Transaction_TransactionDetail", Storage="_Transaction", ThisKey="TransactionId", OtherKey="id", IsForeignKey=true)]
		public Transaction Transaction
		{
			get
			{
				return this._Transaction.Entity;
			}
			set
			{
				Transaction previousValue = this._Transaction.Entity;
				if (((previousValue != value) 
							|| (this._Transaction.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Transaction.Entity = null;
						previousValue.TransactionDetails1.Remove(this);
					}
					this._Transaction.Entity = value;
					if ((value != null))
					{
						value.TransactionDetails1.Add(this);
						this._TransactionId = value.id;
					}
					else
					{
						this._TransactionId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Transaction");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WareHouse_TransactionDetail", Storage="_WareHouse", ThisKey="FromWareHouseId", OtherKey="id", IsForeignKey=true)]
		public WareHouse WareHouse
		{
			get
			{
				return this._WareHouse.Entity;
			}
			set
			{
				WareHouse previousValue = this._WareHouse.Entity;
				if (((previousValue != value) 
							|| (this._WareHouse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WareHouse.Entity = null;
						previousValue.TransactionDetails.Remove(this);
					}
					this._WareHouse.Entity = value;
					if ((value != null))
					{
						value.TransactionDetails.Add(this);
						this._FromWareHouseId = value.id;
					}
					else
					{
						this._FromWareHouseId = default(Nullable<int>);
					}
					this.SendPropertyChanged("WareHouse");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WareHouse_TransactionDetail1", Storage="_WareHouse1", ThisKey="ToWareHouseId", OtherKey="id", IsForeignKey=true)]
		public WareHouse WareHouse1
		{
			get
			{
				return this._WareHouse1.Entity;
			}
			set
			{
				WareHouse previousValue = this._WareHouse1.Entity;
				if (((previousValue != value) 
							|| (this._WareHouse1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WareHouse1.Entity = null;
						previousValue.TransactionDetails1.Remove(this);
					}
					this._WareHouse1.Entity = value;
					if ((value != null))
					{
						value.TransactionDetails1.Add(this);
						this._ToWareHouseId = value.id;
					}
					else
					{
						this._ToWareHouseId = default(Nullable<int>);
					}
					this.SendPropertyChanged("WareHouse1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_TransactionDetail", Storage="_Product", ThisKey="ProductId", OtherKey="id", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.TransactionDetails.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.TransactionDetails.Add(this);
						this._ProductId = value.id;
					}
					else
					{
						this._ProductId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TransactionType")]
	public partial class TransactionType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _TransactionType1;
		
		private string _ActionType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnTransactionType1Changing(string value);
    partial void OnTransactionType1Changed();
    partial void OnActionTypeChanging(string value);
    partial void OnActionTypeChanged();
    #endregion
		
		public TransactionType()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="TransactionType", Storage="_TransactionType1", DbType="NVarChar(MAX)")]
		public string TransactionType1
		{
			get
			{
				return this._TransactionType1;
			}
			set
			{
				if ((this._TransactionType1 != value))
				{
					this.OnTransactionType1Changing(value);
					this.SendPropertyChanging();
					this._TransactionType1 = value;
					this.SendPropertyChanged("TransactionType1");
					this.OnTransactionType1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActionType", DbType="NVarChar(MAX)")]
		public string ActionType
		{
			get
			{
				return this._ActionType;
			}
			set
			{
				if ((this._ActionType != value))
				{
					this.OnActionTypeChanging(value);
					this.SendPropertyChanging();
					this._ActionType = value;
					this.SendPropertyChanged("ActionType");
					this.OnActionTypeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TrialBalance")]
	public partial class TrialBalance
	{
		
		private string _AccountId;
		
		private string _AccountName;
		
		private System.Nullable<double> _Debit;
		
		private System.Nullable<double> _Credit;
		
		public TrialBalance()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", DbType="NVarChar(50)")]
		public string AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					this._AccountId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountName", DbType="NVarChar(MAX)")]
		public string AccountName
		{
			get
			{
				return this._AccountName;
			}
			set
			{
				if ((this._AccountName != value))
				{
					this._AccountName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Debit", DbType="Float")]
		public System.Nullable<double> Debit
		{
			get
			{
				return this._Debit;
			}
			set
			{
				if ((this._Debit != value))
				{
					this._Debit = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Credit", DbType="Float")]
		public System.Nullable<double> Credit
		{
			get
			{
				return this._Credit;
			}
			set
			{
				if ((this._Credit != value))
				{
					this._Credit = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserDetails")]
	public partial class UserDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _userId;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _cellNo;
		
		private string _phoneNo;
		
		private string _Address;
		
		private string _emailId;
		
		private string _CNIC;
		
		private System.Nullable<System.DateTime> _eDate;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnuserIdChanging(System.Nullable<int> value);
    partial void OnuserIdChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OncellNoChanging(string value);
    partial void OncellNoChanged();
    partial void OnphoneNoChanging(string value);
    partial void OnphoneNoChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnemailIdChanging(string value);
    partial void OnemailIdChanged();
    partial void OnCNICChanging(string value);
    partial void OnCNICChanged();
    partial void OneDateChanging(System.Nullable<System.DateTime> value);
    partial void OneDateChanged();
    #endregion
		
		public UserDetail()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userId", DbType="Int")]
		public System.Nullable<int> userId
		{
			get
			{
				return this._userId;
			}
			set
			{
				if ((this._userId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIdChanging(value);
					this.SendPropertyChanging();
					this._userId = value;
					this.SendPropertyChanged("userId");
					this.OnuserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(MAX)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(MAX)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cellNo", DbType="NVarChar(MAX)")]
		public string cellNo
		{
			get
			{
				return this._cellNo;
			}
			set
			{
				if ((this._cellNo != value))
				{
					this.OncellNoChanging(value);
					this.SendPropertyChanging();
					this._cellNo = value;
					this.SendPropertyChanged("cellNo");
					this.OncellNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phoneNo", DbType="NVarChar(MAX)")]
		public string phoneNo
		{
			get
			{
				return this._phoneNo;
			}
			set
			{
				if ((this._phoneNo != value))
				{
					this.OnphoneNoChanging(value);
					this.SendPropertyChanging();
					this._phoneNo = value;
					this.SendPropertyChanged("phoneNo");
					this.OnphoneNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(MAX)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_emailId", DbType="NVarChar(MAX)")]
		public string emailId
		{
			get
			{
				return this._emailId;
			}
			set
			{
				if ((this._emailId != value))
				{
					this.OnemailIdChanging(value);
					this.SendPropertyChanging();
					this._emailId = value;
					this.SendPropertyChanged("emailId");
					this.OnemailIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CNIC", DbType="NVarChar(MAX)")]
		public string CNIC
		{
			get
			{
				return this._CNIC;
			}
			set
			{
				if ((this._CNIC != value))
				{
					this.OnCNICChanging(value);
					this.SendPropertyChanging();
					this._CNIC = value;
					this.SendPropertyChanged("CNIC");
					this.OnCNICChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_eDate", DbType="Date")]
		public System.Nullable<System.DateTime> eDate
		{
			get
			{
				return this._eDate;
			}
			set
			{
				if ((this._eDate != value))
				{
					this.OneDateChanging(value);
					this.SendPropertyChanging();
					this._eDate = value;
					this.SendPropertyChanged("eDate");
					this.OneDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserDetail", Storage="_User", ThisKey="userId", OtherKey="id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserDetails.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserDetails.Add(this);
						this._userId = value.id;
					}
					else
					{
						this._userId = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserRolesContainer")]
	public partial class UserRolesContainer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _userId;
		
		private System.Nullable<int> _RolesId;
		
		private EntityRef<Role> _Role;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnuserIdChanging(System.Nullable<int> value);
    partial void OnuserIdChanged();
    partial void OnRolesIdChanging(System.Nullable<int> value);
    partial void OnRolesIdChanged();
    #endregion
		
		public UserRolesContainer()
		{
			this._Role = default(EntityRef<Role>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userId", DbType="Int")]
		public System.Nullable<int> userId
		{
			get
			{
				return this._userId;
			}
			set
			{
				if ((this._userId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIdChanging(value);
					this.SendPropertyChanging();
					this._userId = value;
					this.SendPropertyChanged("userId");
					this.OnuserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RolesId", DbType="Int")]
		public System.Nullable<int> RolesId
		{
			get
			{
				return this._RolesId;
			}
			set
			{
				if ((this._RolesId != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRolesIdChanging(value);
					this.SendPropertyChanging();
					this._RolesId = value;
					this.SendPropertyChanged("RolesId");
					this.OnRolesIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_UserRolesContainer", Storage="_Role", ThisKey="RolesId", OtherKey="id", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.UserRolesContainers.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.UserRolesContainers.Add(this);
						this._RolesId = value.id;
					}
					else
					{
						this._RolesId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserRolesContainer", Storage="_User", ThisKey="userId", OtherKey="id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserRolesContainers.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserRolesContainers.Add(this);
						this._userId = value.id;
					}
					else
					{
						this._userId = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private string _password;
		
		private string _Approved;
		
		private System.Nullable<System.DateTime> _eDate;
		
		private EntitySet<UserDetail> _UserDetails;
		
		private EntitySet<UserRolesContainer> _UserRolesContainers;
		
		private EntitySet<UserWareHouseContainer> _UserWareHouseContainers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OnApprovedChanging(string value);
    partial void OnApprovedChanged();
    partial void OneDateChanging(System.Nullable<System.DateTime> value);
    partial void OneDateChanged();
    #endregion
		
		public User()
		{
			this._UserDetails = new EntitySet<UserDetail>(new Action<UserDetail>(this.attach_UserDetails), new Action<UserDetail>(this.detach_UserDetails));
			this._UserRolesContainers = new EntitySet<UserRolesContainer>(new Action<UserRolesContainer>(this.attach_UserRolesContainers), new Action<UserRolesContainer>(this.detach_UserRolesContainers));
			this._UserWareHouseContainers = new EntitySet<UserWareHouseContainer>(new Action<UserWareHouseContainer>(this.attach_UserWareHouseContainers), new Action<UserWareHouseContainer>(this.detach_UserWareHouseContainers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(MAX)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="NVarChar(MAX)")]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Approved", DbType="NVarChar(50)")]
		public string Approved
		{
			get
			{
				return this._Approved;
			}
			set
			{
				if ((this._Approved != value))
				{
					this.OnApprovedChanging(value);
					this.SendPropertyChanging();
					this._Approved = value;
					this.SendPropertyChanged("Approved");
					this.OnApprovedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_eDate", DbType="Date")]
		public System.Nullable<System.DateTime> eDate
		{
			get
			{
				return this._eDate;
			}
			set
			{
				if ((this._eDate != value))
				{
					this.OneDateChanging(value);
					this.SendPropertyChanging();
					this._eDate = value;
					this.SendPropertyChanged("eDate");
					this.OneDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserDetail", Storage="_UserDetails", ThisKey="id", OtherKey="userId")]
		public EntitySet<UserDetail> UserDetails
		{
			get
			{
				return this._UserDetails;
			}
			set
			{
				this._UserDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserRolesContainer", Storage="_UserRolesContainers", ThisKey="id", OtherKey="userId")]
		public EntitySet<UserRolesContainer> UserRolesContainers
		{
			get
			{
				return this._UserRolesContainers;
			}
			set
			{
				this._UserRolesContainers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserWareHouseContainer", Storage="_UserWareHouseContainers", ThisKey="id", OtherKey="UserId")]
		public EntitySet<UserWareHouseContainer> UserWareHouseContainers
		{
			get
			{
				return this._UserWareHouseContainers;
			}
			set
			{
				this._UserWareHouseContainers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserDetails(UserDetail entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserDetails(UserDetail entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserRolesContainers(UserRolesContainer entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserRolesContainers(UserRolesContainer entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserWareHouseContainers(UserWareHouseContainer entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserWareHouseContainers(UserWareHouseContainer entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserToEmployee")]
	public partial class UserToEmployee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _EmployeeId;
		
		private System.Nullable<int> _UserId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnEmployeeIdChanging(System.Nullable<int> value);
    partial void OnEmployeeIdChanged();
    partial void OnUserIdChanging(System.Nullable<int> value);
    partial void OnUserIdChanged();
    #endregion
		
		public UserToEmployee()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeId", DbType="Int")]
		public System.Nullable<int> EmployeeId
		{
			get
			{
				return this._EmployeeId;
			}
			set
			{
				if ((this._EmployeeId != value))
				{
					this.OnEmployeeIdChanging(value);
					this.SendPropertyChanging();
					this._EmployeeId = value;
					this.SendPropertyChanged("EmployeeId");
					this.OnEmployeeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int")]
		public System.Nullable<int> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WareHouse")]
	public partial class WareHouse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _Name;
		
		private string _Address;
		
		private string _Phone;
		
		private string _Description;
		
		private System.Nullable<System.DateTime> _openedDate;
		
		private EntitySet<TransactionDetail> _TransactionDetails;
		
		private EntitySet<TransactionDetail> _TransactionDetails1;
		
		private EntitySet<Inventory> _Inventories;
		
		private EntitySet<UserWareHouseContainer> _UserWareHouseContainers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnopenedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnopenedDateChanged();
    #endregion
		
		public WareHouse()
		{
			this._TransactionDetails = new EntitySet<TransactionDetail>(new Action<TransactionDetail>(this.attach_TransactionDetails), new Action<TransactionDetail>(this.detach_TransactionDetails));
			this._TransactionDetails1 = new EntitySet<TransactionDetail>(new Action<TransactionDetail>(this.attach_TransactionDetails1), new Action<TransactionDetail>(this.detach_TransactionDetails1));
			this._Inventories = new EntitySet<Inventory>(new Action<Inventory>(this.attach_Inventories), new Action<Inventory>(this.detach_Inventories));
			this._UserWareHouseContainers = new EntitySet<UserWareHouseContainer>(new Action<UserWareHouseContainer>(this.attach_UserWareHouseContainers), new Action<UserWareHouseContainer>(this.detach_UserWareHouseContainers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(MAX)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(MAX)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_openedDate", DbType="Date")]
		public System.Nullable<System.DateTime> openedDate
		{
			get
			{
				return this._openedDate;
			}
			set
			{
				if ((this._openedDate != value))
				{
					this.OnopenedDateChanging(value);
					this.SendPropertyChanging();
					this._openedDate = value;
					this.SendPropertyChanged("openedDate");
					this.OnopenedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WareHouse_TransactionDetail", Storage="_TransactionDetails", ThisKey="id", OtherKey="FromWareHouseId")]
		public EntitySet<TransactionDetail> TransactionDetails
		{
			get
			{
				return this._TransactionDetails;
			}
			set
			{
				this._TransactionDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WareHouse_TransactionDetail1", Storage="_TransactionDetails1", ThisKey="id", OtherKey="ToWareHouseId")]
		public EntitySet<TransactionDetail> TransactionDetails1
		{
			get
			{
				return this._TransactionDetails1;
			}
			set
			{
				this._TransactionDetails1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WareHouse_Inventory", Storage="_Inventories", ThisKey="id", OtherKey="WareHouseId")]
		public EntitySet<Inventory> Inventories
		{
			get
			{
				return this._Inventories;
			}
			set
			{
				this._Inventories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WareHouse_UserWareHouseContainer", Storage="_UserWareHouseContainers", ThisKey="id", OtherKey="WareHouseId")]
		public EntitySet<UserWareHouseContainer> UserWareHouseContainers
		{
			get
			{
				return this._UserWareHouseContainers;
			}
			set
			{
				this._UserWareHouseContainers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TransactionDetails(TransactionDetail entity)
		{
			this.SendPropertyChanging();
			entity.WareHouse = this;
		}
		
		private void detach_TransactionDetails(TransactionDetail entity)
		{
			this.SendPropertyChanging();
			entity.WareHouse = null;
		}
		
		private void attach_TransactionDetails1(TransactionDetail entity)
		{
			this.SendPropertyChanging();
			entity.WareHouse1 = this;
		}
		
		private void detach_TransactionDetails1(TransactionDetail entity)
		{
			this.SendPropertyChanging();
			entity.WareHouse1 = null;
		}
		
		private void attach_Inventories(Inventory entity)
		{
			this.SendPropertyChanging();
			entity.WareHouse = this;
		}
		
		private void detach_Inventories(Inventory entity)
		{
			this.SendPropertyChanging();
			entity.WareHouse = null;
		}
		
		private void attach_UserWareHouseContainers(UserWareHouseContainer entity)
		{
			this.SendPropertyChanging();
			entity.WareHouse = this;
		}
		
		private void detach_UserWareHouseContainers(UserWareHouseContainer entity)
		{
			this.SendPropertyChanging();
			entity.WareHouse = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Inventory")]
	public partial class Inventory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _ProductId;
		
		private System.Nullable<int> _WareHouseId;
		
		private string _Cost;
		
		private string _Quantity;
		
		private System.Nullable<int> _FiscalYearId;
		
		private System.Nullable<System.DateTime> _date;
		
		private EntityRef<WareHouse> _WareHouse;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnProductIdChanging(System.Nullable<int> value);
    partial void OnProductIdChanged();
    partial void OnWareHouseIdChanging(System.Nullable<int> value);
    partial void OnWareHouseIdChanged();
    partial void OnCostChanging(string value);
    partial void OnCostChanged();
    partial void OnQuantityChanging(string value);
    partial void OnQuantityChanged();
    partial void OnFiscalYearIdChanging(System.Nullable<int> value);
    partial void OnFiscalYearIdChanged();
    partial void OndateChanging(System.Nullable<System.DateTime> value);
    partial void OndateChanged();
    #endregion
		
		public Inventory()
		{
			this._WareHouse = default(EntityRef<WareHouse>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductId", DbType="Int")]
		public System.Nullable<int> ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WareHouseId", DbType="Int")]
		public System.Nullable<int> WareHouseId
		{
			get
			{
				return this._WareHouseId;
			}
			set
			{
				if ((this._WareHouseId != value))
				{
					if (this._WareHouse.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWareHouseIdChanging(value);
					this.SendPropertyChanging();
					this._WareHouseId = value;
					this.SendPropertyChanged("WareHouseId");
					this.OnWareHouseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cost", DbType="NVarChar(MAX)")]
		public string Cost
		{
			get
			{
				return this._Cost;
			}
			set
			{
				if ((this._Cost != value))
				{
					this.OnCostChanging(value);
					this.SendPropertyChanging();
					this._Cost = value;
					this.SendPropertyChanged("Cost");
					this.OnCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="NVarChar(MAX)")]
		public string Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FiscalYearId", DbType="Int")]
		public System.Nullable<int> FiscalYearId
		{
			get
			{
				return this._FiscalYearId;
			}
			set
			{
				if ((this._FiscalYearId != value))
				{
					this.OnFiscalYearIdChanging(value);
					this.SendPropertyChanging();
					this._FiscalYearId = value;
					this.SendPropertyChanged("FiscalYearId");
					this.OnFiscalYearIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", DbType="Date")]
		public System.Nullable<System.DateTime> date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WareHouse_Inventory", Storage="_WareHouse", ThisKey="WareHouseId", OtherKey="id", IsForeignKey=true)]
		public WareHouse WareHouse
		{
			get
			{
				return this._WareHouse.Entity;
			}
			set
			{
				WareHouse previousValue = this._WareHouse.Entity;
				if (((previousValue != value) 
							|| (this._WareHouse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WareHouse.Entity = null;
						previousValue.Inventories.Remove(this);
					}
					this._WareHouse.Entity = value;
					if ((value != null))
					{
						value.Inventories.Add(this);
						this._WareHouseId = value.id;
					}
					else
					{
						this._WareHouseId = default(Nullable<int>);
					}
					this.SendPropertyChanged("WareHouse");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Inventory", Storage="_Product", ThisKey="ProductId", OtherKey="id", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.Inventories.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.Inventories.Add(this);
						this._ProductId = value.id;
					}
					else
					{
						this._ProductId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InventoryBalance")]
	public partial class InventoryBalance : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<System.DateTime> _Date;
		
		private System.Nullable<int> _WarehouseId;
		
		private System.Nullable<int> _ProductsId;
		
		private string _PurchaseUnits;
		
		private string _PurchaseUnitsCost;
		
		private string _PurchaseTotal;
		
		private string _SaleUnits;
		
		private string _SaleUnitsCost;
		
		private string _SaleTotal;
		
		private string _BalanceUnits;
		
		private string _BalanceUnitsCost;
		
		private string _BalanceTotal;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnWarehouseIdChanging(System.Nullable<int> value);
    partial void OnWarehouseIdChanged();
    partial void OnProductsIdChanging(System.Nullable<int> value);
    partial void OnProductsIdChanged();
    partial void OnPurchaseUnitsChanging(string value);
    partial void OnPurchaseUnitsChanged();
    partial void OnPurchaseUnitsCostChanging(string value);
    partial void OnPurchaseUnitsCostChanged();
    partial void OnPurchaseTotalChanging(string value);
    partial void OnPurchaseTotalChanged();
    partial void OnSaleUnitsChanging(string value);
    partial void OnSaleUnitsChanged();
    partial void OnSaleUnitsCostChanging(string value);
    partial void OnSaleUnitsCostChanged();
    partial void OnSaleTotalChanging(string value);
    partial void OnSaleTotalChanged();
    partial void OnBalanceUnitsChanging(string value);
    partial void OnBalanceUnitsChanged();
    partial void OnBalanceUnitsCostChanging(string value);
    partial void OnBalanceUnitsCostChanged();
    partial void OnBalanceTotalChanging(string value);
    partial void OnBalanceTotalChanged();
    #endregion
		
		public InventoryBalance()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Date")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WarehouseId", DbType="Int")]
		public System.Nullable<int> WarehouseId
		{
			get
			{
				return this._WarehouseId;
			}
			set
			{
				if ((this._WarehouseId != value))
				{
					this.OnWarehouseIdChanging(value);
					this.SendPropertyChanging();
					this._WarehouseId = value;
					this.SendPropertyChanged("WarehouseId");
					this.OnWarehouseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductsId", DbType="Int")]
		public System.Nullable<int> ProductsId
		{
			get
			{
				return this._ProductsId;
			}
			set
			{
				if ((this._ProductsId != value))
				{
					this.OnProductsIdChanging(value);
					this.SendPropertyChanging();
					this._ProductsId = value;
					this.SendPropertyChanged("ProductsId");
					this.OnProductsIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PurchaseUnits", DbType="NVarChar(MAX)")]
		public string PurchaseUnits
		{
			get
			{
				return this._PurchaseUnits;
			}
			set
			{
				if ((this._PurchaseUnits != value))
				{
					this.OnPurchaseUnitsChanging(value);
					this.SendPropertyChanging();
					this._PurchaseUnits = value;
					this.SendPropertyChanged("PurchaseUnits");
					this.OnPurchaseUnitsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PurchaseUnitsCost", DbType="NVarChar(MAX)")]
		public string PurchaseUnitsCost
		{
			get
			{
				return this._PurchaseUnitsCost;
			}
			set
			{
				if ((this._PurchaseUnitsCost != value))
				{
					this.OnPurchaseUnitsCostChanging(value);
					this.SendPropertyChanging();
					this._PurchaseUnitsCost = value;
					this.SendPropertyChanged("PurchaseUnitsCost");
					this.OnPurchaseUnitsCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PurchaseTotal", DbType="NVarChar(MAX)")]
		public string PurchaseTotal
		{
			get
			{
				return this._PurchaseTotal;
			}
			set
			{
				if ((this._PurchaseTotal != value))
				{
					this.OnPurchaseTotalChanging(value);
					this.SendPropertyChanging();
					this._PurchaseTotal = value;
					this.SendPropertyChanged("PurchaseTotal");
					this.OnPurchaseTotalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SaleUnits", DbType="NVarChar(MAX)")]
		public string SaleUnits
		{
			get
			{
				return this._SaleUnits;
			}
			set
			{
				if ((this._SaleUnits != value))
				{
					this.OnSaleUnitsChanging(value);
					this.SendPropertyChanging();
					this._SaleUnits = value;
					this.SendPropertyChanged("SaleUnits");
					this.OnSaleUnitsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SaleUnitsCost", DbType="NVarChar(MAX)")]
		public string SaleUnitsCost
		{
			get
			{
				return this._SaleUnitsCost;
			}
			set
			{
				if ((this._SaleUnitsCost != value))
				{
					this.OnSaleUnitsCostChanging(value);
					this.SendPropertyChanging();
					this._SaleUnitsCost = value;
					this.SendPropertyChanged("SaleUnitsCost");
					this.OnSaleUnitsCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SaleTotal", DbType="NVarChar(MAX)")]
		public string SaleTotal
		{
			get
			{
				return this._SaleTotal;
			}
			set
			{
				if ((this._SaleTotal != value))
				{
					this.OnSaleTotalChanging(value);
					this.SendPropertyChanging();
					this._SaleTotal = value;
					this.SendPropertyChanged("SaleTotal");
					this.OnSaleTotalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BalanceUnits", DbType="NVarChar(MAX)")]
		public string BalanceUnits
		{
			get
			{
				return this._BalanceUnits;
			}
			set
			{
				if ((this._BalanceUnits != value))
				{
					this.OnBalanceUnitsChanging(value);
					this.SendPropertyChanging();
					this._BalanceUnits = value;
					this.SendPropertyChanged("BalanceUnits");
					this.OnBalanceUnitsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BalanceUnitsCost", DbType="NVarChar(MAX)")]
		public string BalanceUnitsCost
		{
			get
			{
				return this._BalanceUnitsCost;
			}
			set
			{
				if ((this._BalanceUnitsCost != value))
				{
					this.OnBalanceUnitsCostChanging(value);
					this.SendPropertyChanging();
					this._BalanceUnitsCost = value;
					this.SendPropertyChanged("BalanceUnitsCost");
					this.OnBalanceUnitsCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BalanceTotal", DbType="NVarChar(MAX)")]
		public string BalanceTotal
		{
			get
			{
				return this._BalanceTotal;
			}
			set
			{
				if ((this._BalanceTotal != value))
				{
					this.OnBalanceTotalChanging(value);
					this.SendPropertyChanging();
					this._BalanceTotal = value;
					this.SendPropertyChanged("BalanceTotal");
					this.OnBalanceTotalChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PaymentBankContainer")]
	public partial class PaymentBankContainer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _PaymentId;
		
		private System.Nullable<int> _BankId;
		
		private string _AmountRemaining;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnPaymentIdChanging(System.Nullable<int> value);
    partial void OnPaymentIdChanged();
    partial void OnBankIdChanging(System.Nullable<int> value);
    partial void OnBankIdChanged();
    partial void OnAmountRemainingChanging(string value);
    partial void OnAmountRemainingChanged();
    #endregion
		
		public PaymentBankContainer()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentId", DbType="Int")]
		public System.Nullable<int> PaymentId
		{
			get
			{
				return this._PaymentId;
			}
			set
			{
				if ((this._PaymentId != value))
				{
					this.OnPaymentIdChanging(value);
					this.SendPropertyChanging();
					this._PaymentId = value;
					this.SendPropertyChanged("PaymentId");
					this.OnPaymentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankId", DbType="Int")]
		public System.Nullable<int> BankId
		{
			get
			{
				return this._BankId;
			}
			set
			{
				if ((this._BankId != value))
				{
					this.OnBankIdChanging(value);
					this.SendPropertyChanging();
					this._BankId = value;
					this.SendPropertyChanged("BankId");
					this.OnBankIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AmountRemaining", DbType="NVarChar(MAX)")]
		public string AmountRemaining
		{
			get
			{
				return this._AmountRemaining;
			}
			set
			{
				if ((this._AmountRemaining != value))
				{
					this.OnAmountRemainingChanging(value);
					this.SendPropertyChanging();
					this._AmountRemaining = value;
					this.SendPropertyChanged("AmountRemaining");
					this.OnAmountRemainingChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderLine")]
	public partial class OrderLine : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _OrderId;
		
		private System.Nullable<int> _ProductId;
		
		private string _SalePrice;
		
		private string _units;
		
		private string _totalProductCost;
		
		private System.Nullable<System.DateTime> _eDate;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnOrderIdChanging(System.Nullable<int> value);
    partial void OnOrderIdChanged();
    partial void OnProductIdChanging(System.Nullable<int> value);
    partial void OnProductIdChanged();
    partial void OnSalePriceChanging(string value);
    partial void OnSalePriceChanged();
    partial void OnunitsChanging(string value);
    partial void OnunitsChanged();
    partial void OntotalProductCostChanging(string value);
    partial void OntotalProductCostChanged();
    partial void OneDateChanging(System.Nullable<System.DateTime> value);
    partial void OneDateChanged();
    #endregion
		
		public OrderLine()
		{
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderId", DbType="Int")]
		public System.Nullable<int> OrderId
		{
			get
			{
				return this._OrderId;
			}
			set
			{
				if ((this._OrderId != value))
				{
					this.OnOrderIdChanging(value);
					this.SendPropertyChanging();
					this._OrderId = value;
					this.SendPropertyChanged("OrderId");
					this.OnOrderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductId", DbType="Int")]
		public System.Nullable<int> ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalePrice", DbType="NVarChar(MAX)")]
		public string SalePrice
		{
			get
			{
				return this._SalePrice;
			}
			set
			{
				if ((this._SalePrice != value))
				{
					this.OnSalePriceChanging(value);
					this.SendPropertyChanging();
					this._SalePrice = value;
					this.SendPropertyChanged("SalePrice");
					this.OnSalePriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_units", DbType="NVarChar(MAX)")]
		public string units
		{
			get
			{
				return this._units;
			}
			set
			{
				if ((this._units != value))
				{
					this.OnunitsChanging(value);
					this.SendPropertyChanging();
					this._units = value;
					this.SendPropertyChanged("units");
					this.OnunitsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_totalProductCost", DbType="NVarChar(MAX)")]
		public string totalProductCost
		{
			get
			{
				return this._totalProductCost;
			}
			set
			{
				if ((this._totalProductCost != value))
				{
					this.OntotalProductCostChanging(value);
					this.SendPropertyChanging();
					this._totalProductCost = value;
					this.SendPropertyChanged("totalProductCost");
					this.OntotalProductCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_eDate", DbType="Date")]
		public System.Nullable<System.DateTime> eDate
		{
			get
			{
				return this._eDate;
			}
			set
			{
				if ((this._eDate != value))
				{
					this.OneDateChanging(value);
					this.SendPropertyChanging();
					this._eDate = value;
					this.SendPropertyChanged("eDate");
					this.OneDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_OrderLine", Storage="_Product", ThisKey="ProductId", OtherKey="id", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.OrderLines.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.OrderLines.Add(this);
						this._ProductId = value.id;
					}
					else
					{
						this._ProductId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Payment")]
	public partial class Payment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _ClientId;
		
		private System.Nullable<int> _VendorId;
		
		private System.Nullable<int> _OrderId;
		
		private System.Nullable<int> _TransactionId;
		
		private string _TotalCost;
		
		private string _Paid;
		
		private string _PaymentType;
		
		private string _PaymentState;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnClientIdChanging(System.Nullable<int> value);
    partial void OnClientIdChanged();
    partial void OnVendorIdChanging(System.Nullable<int> value);
    partial void OnVendorIdChanged();
    partial void OnOrderIdChanging(System.Nullable<int> value);
    partial void OnOrderIdChanged();
    partial void OnTransactionIdChanging(System.Nullable<int> value);
    partial void OnTransactionIdChanged();
    partial void OnTotalCostChanging(string value);
    partial void OnTotalCostChanged();
    partial void OnPaidChanging(string value);
    partial void OnPaidChanged();
    partial void OnPaymentTypeChanging(string value);
    partial void OnPaymentTypeChanged();
    partial void OnPaymentStateChanging(string value);
    partial void OnPaymentStateChanged();
    #endregion
		
		public Payment()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientId", DbType="Int")]
		public System.Nullable<int> ClientId
		{
			get
			{
				return this._ClientId;
			}
			set
			{
				if ((this._ClientId != value))
				{
					this.OnClientIdChanging(value);
					this.SendPropertyChanging();
					this._ClientId = value;
					this.SendPropertyChanged("ClientId");
					this.OnClientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VendorId", DbType="Int")]
		public System.Nullable<int> VendorId
		{
			get
			{
				return this._VendorId;
			}
			set
			{
				if ((this._VendorId != value))
				{
					this.OnVendorIdChanging(value);
					this.SendPropertyChanging();
					this._VendorId = value;
					this.SendPropertyChanged("VendorId");
					this.OnVendorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderId", DbType="Int")]
		public System.Nullable<int> OrderId
		{
			get
			{
				return this._OrderId;
			}
			set
			{
				if ((this._OrderId != value))
				{
					this.OnOrderIdChanging(value);
					this.SendPropertyChanging();
					this._OrderId = value;
					this.SendPropertyChanged("OrderId");
					this.OnOrderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionId", DbType="Int")]
		public System.Nullable<int> TransactionId
		{
			get
			{
				return this._TransactionId;
			}
			set
			{
				if ((this._TransactionId != value))
				{
					this.OnTransactionIdChanging(value);
					this.SendPropertyChanging();
					this._TransactionId = value;
					this.SendPropertyChanged("TransactionId");
					this.OnTransactionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalCost", DbType="NVarChar(MAX)")]
		public string TotalCost
		{
			get
			{
				return this._TotalCost;
			}
			set
			{
				if ((this._TotalCost != value))
				{
					this.OnTotalCostChanging(value);
					this.SendPropertyChanging();
					this._TotalCost = value;
					this.SendPropertyChanged("TotalCost");
					this.OnTotalCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Paid", DbType="NVarChar(MAX)")]
		public string Paid
		{
			get
			{
				return this._Paid;
			}
			set
			{
				if ((this._Paid != value))
				{
					this.OnPaidChanging(value);
					this.SendPropertyChanging();
					this._Paid = value;
					this.SendPropertyChanged("Paid");
					this.OnPaidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentType", DbType="NVarChar(MAX)")]
		public string PaymentType
		{
			get
			{
				return this._PaymentType;
			}
			set
			{
				if ((this._PaymentType != value))
				{
					this.OnPaymentTypeChanging(value);
					this.SendPropertyChanging();
					this._PaymentType = value;
					this.SendPropertyChanged("PaymentType");
					this.OnPaymentTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentState", DbType="NVarChar(MAX)")]
		public string PaymentState
		{
			get
			{
				return this._PaymentState;
			}
			set
			{
				if ((this._PaymentState != value))
				{
					this.OnPaymentStateChanging(value);
					this.SendPropertyChanging();
					this._PaymentState = value;
					this.SendPropertyChanged("PaymentState");
					this.OnPaymentStateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PaidSalary")]
	public partial class PaidSalary : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _EmployeeId;
		
		private System.Nullable<int> _SalaryId;
		
		private string _MonthPaid;
		
		private string _Paid;
		
		private System.Nullable<System.DateTime> _DatePaid;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnEmployeeIdChanging(System.Nullable<int> value);
    partial void OnEmployeeIdChanged();
    partial void OnSalaryIdChanging(System.Nullable<int> value);
    partial void OnSalaryIdChanged();
    partial void OnMonthPaidChanging(string value);
    partial void OnMonthPaidChanged();
    partial void OnPaidChanging(string value);
    partial void OnPaidChanged();
    partial void OnDatePaidChanging(System.Nullable<System.DateTime> value);
    partial void OnDatePaidChanged();
    #endregion
		
		public PaidSalary()
		{
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeId", DbType="Int")]
		public System.Nullable<int> EmployeeId
		{
			get
			{
				return this._EmployeeId;
			}
			set
			{
				if ((this._EmployeeId != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIdChanging(value);
					this.SendPropertyChanging();
					this._EmployeeId = value;
					this.SendPropertyChanged("EmployeeId");
					this.OnEmployeeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalaryId", DbType="Int")]
		public System.Nullable<int> SalaryId
		{
			get
			{
				return this._SalaryId;
			}
			set
			{
				if ((this._SalaryId != value))
				{
					this.OnSalaryIdChanging(value);
					this.SendPropertyChanging();
					this._SalaryId = value;
					this.SendPropertyChanged("SalaryId");
					this.OnSalaryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MonthPaid", DbType="NVarChar(MAX)")]
		public string MonthPaid
		{
			get
			{
				return this._MonthPaid;
			}
			set
			{
				if ((this._MonthPaid != value))
				{
					this.OnMonthPaidChanging(value);
					this.SendPropertyChanging();
					this._MonthPaid = value;
					this.SendPropertyChanged("MonthPaid");
					this.OnMonthPaidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Paid", DbType="NVarChar(MAX)")]
		public string Paid
		{
			get
			{
				return this._Paid;
			}
			set
			{
				if ((this._Paid != value))
				{
					this.OnPaidChanging(value);
					this.SendPropertyChanging();
					this._Paid = value;
					this.SendPropertyChanged("Paid");
					this.OnPaidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DatePaid", DbType="Date")]
		public System.Nullable<System.DateTime> DatePaid
		{
			get
			{
				return this._DatePaid;
			}
			set
			{
				if ((this._DatePaid != value))
				{
					this.OnDatePaidChanging(value);
					this.SendPropertyChanging();
					this._DatePaid = value;
					this.SendPropertyChanged("DatePaid");
					this.OnDatePaidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_PaidSalary", Storage="_Employee", ThisKey="EmployeeId", OtherKey="id", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.PaidSalaries.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.PaidSalaries.Add(this);
						this._EmployeeId = value.id;
					}
					else
					{
						this._EmployeeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FiscalYear")]
	public partial class FiscalYear : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<System.DateTime> _fiscalFrom;
		
		private System.Nullable<System.DateTime> _fiscalTo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnfiscalFromChanging(System.Nullable<System.DateTime> value);
    partial void OnfiscalFromChanged();
    partial void OnfiscalToChanging(System.Nullable<System.DateTime> value);
    partial void OnfiscalToChanged();
    #endregion
		
		public FiscalYear()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fiscalFrom", DbType="Date")]
		public System.Nullable<System.DateTime> fiscalFrom
		{
			get
			{
				return this._fiscalFrom;
			}
			set
			{
				if ((this._fiscalFrom != value))
				{
					this.OnfiscalFromChanging(value);
					this.SendPropertyChanging();
					this._fiscalFrom = value;
					this.SendPropertyChanged("fiscalFrom");
					this.OnfiscalFromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fiscalTo", DbType="Date")]
		public System.Nullable<System.DateTime> fiscalTo
		{
			get
			{
				return this._fiscalTo;
			}
			set
			{
				if ((this._fiscalTo != value))
				{
					this.OnfiscalToChanging(value);
					this.SendPropertyChanging();
					this._fiscalTo = value;
					this.SendPropertyChanged("fiscalTo");
					this.OnfiscalToChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DefaultFiscalYear")]
	public partial class DefaultFiscalYear : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _DefaultfiscalYear1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnDefaultfiscalYear1Changing(System.Nullable<int> value);
    partial void OnDefaultfiscalYear1Changed();
    #endregion
		
		public DefaultFiscalYear()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="DefaultfiscalYear", Storage="_DefaultfiscalYear1", DbType="Int")]
		public System.Nullable<int> DefaultfiscalYear1
		{
			get
			{
				return this._DefaultfiscalYear1;
			}
			set
			{
				if ((this._DefaultfiscalYear1 != value))
				{
					this.OnDefaultfiscalYear1Changing(value);
					this.SendPropertyChanging();
					this._DefaultfiscalYear1 = value;
					this.SendPropertyChanged("DefaultfiscalYear1");
					this.OnDefaultfiscalYear1Changed();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BankAccount")]
	public partial class BankAccount : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _BankId;
		
		private string _AccountNumber;
		
		private string _AccountTitle;
		
		private string _AccountHolderId;
		
		private string _OpeningBalance;
		
		private string _Balance;
		
		private string _BeginDate;
		
		private System.Nullable<int> _WareHouseId;
		
		private EntitySet<AccountTransaction> _AccountTransactions;
		
		private EntityRef<Bank> _Bank;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnBankIdChanging(System.Nullable<int> value);
    partial void OnBankIdChanged();
    partial void OnAccountNumberChanging(string value);
    partial void OnAccountNumberChanged();
    partial void OnAccountTitleChanging(string value);
    partial void OnAccountTitleChanged();
    partial void OnAccountHolderIdChanging(string value);
    partial void OnAccountHolderIdChanged();
    partial void OnOpeningBalanceChanging(string value);
    partial void OnOpeningBalanceChanged();
    partial void OnBalanceChanging(string value);
    partial void OnBalanceChanged();
    partial void OnBeginDateChanging(string value);
    partial void OnBeginDateChanged();
    partial void OnWareHouseIdChanging(System.Nullable<int> value);
    partial void OnWareHouseIdChanged();
    #endregion
		
		public BankAccount()
		{
			this._AccountTransactions = new EntitySet<AccountTransaction>(new Action<AccountTransaction>(this.attach_AccountTransactions), new Action<AccountTransaction>(this.detach_AccountTransactions));
			this._Bank = default(EntityRef<Bank>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankId", DbType="Int")]
		public System.Nullable<int> BankId
		{
			get
			{
				return this._BankId;
			}
			set
			{
				if ((this._BankId != value))
				{
					if (this._Bank.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBankIdChanging(value);
					this.SendPropertyChanging();
					this._BankId = value;
					this.SendPropertyChanged("BankId");
					this.OnBankIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountNumber", DbType="NVarChar(MAX)")]
		public string AccountNumber
		{
			get
			{
				return this._AccountNumber;
			}
			set
			{
				if ((this._AccountNumber != value))
				{
					this.OnAccountNumberChanging(value);
					this.SendPropertyChanging();
					this._AccountNumber = value;
					this.SendPropertyChanged("AccountNumber");
					this.OnAccountNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountTitle", DbType="NVarChar(MAX)")]
		public string AccountTitle
		{
			get
			{
				return this._AccountTitle;
			}
			set
			{
				if ((this._AccountTitle != value))
				{
					this.OnAccountTitleChanging(value);
					this.SendPropertyChanging();
					this._AccountTitle = value;
					this.SendPropertyChanged("AccountTitle");
					this.OnAccountTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountHolderId", DbType="NVarChar(MAX)")]
		public string AccountHolderId
		{
			get
			{
				return this._AccountHolderId;
			}
			set
			{
				if ((this._AccountHolderId != value))
				{
					this.OnAccountHolderIdChanging(value);
					this.SendPropertyChanging();
					this._AccountHolderId = value;
					this.SendPropertyChanged("AccountHolderId");
					this.OnAccountHolderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OpeningBalance", DbType="NVarChar(MAX)")]
		public string OpeningBalance
		{
			get
			{
				return this._OpeningBalance;
			}
			set
			{
				if ((this._OpeningBalance != value))
				{
					this.OnOpeningBalanceChanging(value);
					this.SendPropertyChanging();
					this._OpeningBalance = value;
					this.SendPropertyChanged("OpeningBalance");
					this.OnOpeningBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Balance", DbType="NVarChar(MAX)")]
		public string Balance
		{
			get
			{
				return this._Balance;
			}
			set
			{
				if ((this._Balance != value))
				{
					this.OnBalanceChanging(value);
					this.SendPropertyChanging();
					this._Balance = value;
					this.SendPropertyChanged("Balance");
					this.OnBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeginDate", DbType="NVarChar(MAX)")]
		public string BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WareHouseId", DbType="Int")]
		public System.Nullable<int> WareHouseId
		{
			get
			{
				return this._WareHouseId;
			}
			set
			{
				if ((this._WareHouseId != value))
				{
					this.OnWareHouseIdChanging(value);
					this.SendPropertyChanging();
					this._WareHouseId = value;
					this.SendPropertyChanged("WareHouseId");
					this.OnWareHouseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BankAccount_AccountTransaction", Storage="_AccountTransactions", ThisKey="id", OtherKey="AccountId")]
		public EntitySet<AccountTransaction> AccountTransactions
		{
			get
			{
				return this._AccountTransactions;
			}
			set
			{
				this._AccountTransactions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bank_BankAccount", Storage="_Bank", ThisKey="BankId", OtherKey="id", IsForeignKey=true)]
		public Bank Bank
		{
			get
			{
				return this._Bank.Entity;
			}
			set
			{
				Bank previousValue = this._Bank.Entity;
				if (((previousValue != value) 
							|| (this._Bank.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bank.Entity = null;
						previousValue.BankAccounts.Remove(this);
					}
					this._Bank.Entity = value;
					if ((value != null))
					{
						value.BankAccounts.Add(this);
						this._BankId = value.id;
					}
					else
					{
						this._BankId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Bank");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AccountTransactions(AccountTransaction entity)
		{
			this.SendPropertyChanging();
			entity.BankAccount = this;
		}
		
		private void detach_AccountTransactions(AccountTransaction entity)
		{
			this.SendPropertyChanging();
			entity.BankAccount = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AccountTransaction")]
	public partial class AccountTransaction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _AccountId;
		
		private string _Debit;
		
		private string _Credit;
		
		private string _Description;
		
		private string _Total;
		
		private string _CurrentTransaction;
		
		private string _TransactionType;
		
		private System.Nullable<int> _FiscalYearId;
		
		private System.Nullable<System.DateTime> _eDate;
		
		private System.Nullable<int> _WareHouseId;
		
		private System.Nullable<int> _UserId;
		
		private EntityRef<BankAccount> _BankAccount;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnAccountIdChanging(System.Nullable<int> value);
    partial void OnAccountIdChanged();
    partial void OnDebitChanging(string value);
    partial void OnDebitChanged();
    partial void OnCreditChanging(string value);
    partial void OnCreditChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnTotalChanging(string value);
    partial void OnTotalChanged();
    partial void OnCurrentTransactionChanging(string value);
    partial void OnCurrentTransactionChanged();
    partial void OnTransactionTypeChanging(string value);
    partial void OnTransactionTypeChanged();
    partial void OnFiscalYearIdChanging(System.Nullable<int> value);
    partial void OnFiscalYearIdChanged();
    partial void OneDateChanging(System.Nullable<System.DateTime> value);
    partial void OneDateChanged();
    partial void OnWareHouseIdChanging(System.Nullable<int> value);
    partial void OnWareHouseIdChanged();
    partial void OnUserIdChanging(System.Nullable<int> value);
    partial void OnUserIdChanged();
    #endregion
		
		public AccountTransaction()
		{
			this._BankAccount = default(EntityRef<BankAccount>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", DbType="Int")]
		public System.Nullable<int> AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					if (this._BankAccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Debit", DbType="NVarChar(MAX)")]
		public string Debit
		{
			get
			{
				return this._Debit;
			}
			set
			{
				if ((this._Debit != value))
				{
					this.OnDebitChanging(value);
					this.SendPropertyChanging();
					this._Debit = value;
					this.SendPropertyChanged("Debit");
					this.OnDebitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Credit", DbType="NVarChar(MAX)")]
		public string Credit
		{
			get
			{
				return this._Credit;
			}
			set
			{
				if ((this._Credit != value))
				{
					this.OnCreditChanging(value);
					this.SendPropertyChanging();
					this._Credit = value;
					this.SendPropertyChanged("Credit");
					this.OnCreditChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Total", DbType="NVarChar(MAX)")]
		public string Total
		{
			get
			{
				return this._Total;
			}
			set
			{
				if ((this._Total != value))
				{
					this.OnTotalChanging(value);
					this.SendPropertyChanging();
					this._Total = value;
					this.SendPropertyChanged("Total");
					this.OnTotalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentTransaction", DbType="NVarChar(MAX)")]
		public string CurrentTransaction
		{
			get
			{
				return this._CurrentTransaction;
			}
			set
			{
				if ((this._CurrentTransaction != value))
				{
					this.OnCurrentTransactionChanging(value);
					this.SendPropertyChanging();
					this._CurrentTransaction = value;
					this.SendPropertyChanged("CurrentTransaction");
					this.OnCurrentTransactionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionType", DbType="NVarChar(MAX)")]
		public string TransactionType
		{
			get
			{
				return this._TransactionType;
			}
			set
			{
				if ((this._TransactionType != value))
				{
					this.OnTransactionTypeChanging(value);
					this.SendPropertyChanging();
					this._TransactionType = value;
					this.SendPropertyChanged("TransactionType");
					this.OnTransactionTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FiscalYearId", DbType="Int")]
		public System.Nullable<int> FiscalYearId
		{
			get
			{
				return this._FiscalYearId;
			}
			set
			{
				if ((this._FiscalYearId != value))
				{
					this.OnFiscalYearIdChanging(value);
					this.SendPropertyChanging();
					this._FiscalYearId = value;
					this.SendPropertyChanged("FiscalYearId");
					this.OnFiscalYearIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_eDate", DbType="Date")]
		public System.Nullable<System.DateTime> eDate
		{
			get
			{
				return this._eDate;
			}
			set
			{
				if ((this._eDate != value))
				{
					this.OneDateChanging(value);
					this.SendPropertyChanging();
					this._eDate = value;
					this.SendPropertyChanged("eDate");
					this.OneDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WareHouseId", DbType="Int")]
		public System.Nullable<int> WareHouseId
		{
			get
			{
				return this._WareHouseId;
			}
			set
			{
				if ((this._WareHouseId != value))
				{
					this.OnWareHouseIdChanging(value);
					this.SendPropertyChanging();
					this._WareHouseId = value;
					this.SendPropertyChanged("WareHouseId");
					this.OnWareHouseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int")]
		public System.Nullable<int> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BankAccount_AccountTransaction", Storage="_BankAccount", ThisKey="AccountId", OtherKey="id", IsForeignKey=true)]
		public BankAccount BankAccount
		{
			get
			{
				return this._BankAccount.Entity;
			}
			set
			{
				BankAccount previousValue = this._BankAccount.Entity;
				if (((previousValue != value) 
							|| (this._BankAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BankAccount.Entity = null;
						previousValue.AccountTransactions.Remove(this);
					}
					this._BankAccount.Entity = value;
					if ((value != null))
					{
						value.AccountTransactions.Add(this);
						this._AccountId = value.id;
					}
					else
					{
						this._AccountId = default(Nullable<int>);
					}
					this.SendPropertyChanged("BankAccount");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Transactions")]
	public partial class Transaction1 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _ProductID;
		
		private System.Nullable<int> _WareHouseId;
		
		private System.Nullable<int> _OrderId;
		
		private string _CostPrice;
		
		private string _SalePrice;
		
		private string _units;
		
		private string _TransactionType;
		
		private string _ClientID;
		
		private string _VendorID;
		
		private System.Nullable<System.DateTime> _date;
		
		private System.Nullable<int> _UserId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnProductIDChanging(System.Nullable<int> value);
    partial void OnProductIDChanged();
    partial void OnWareHouseIdChanging(System.Nullable<int> value);
    partial void OnWareHouseIdChanged();
    partial void OnOrderIdChanging(System.Nullable<int> value);
    partial void OnOrderIdChanged();
    partial void OnCostPriceChanging(string value);
    partial void OnCostPriceChanged();
    partial void OnSalePriceChanging(string value);
    partial void OnSalePriceChanged();
    partial void OnunitsChanging(string value);
    partial void OnunitsChanged();
    partial void OnTransactionTypeChanging(string value);
    partial void OnTransactionTypeChanged();
    partial void OnClientIDChanging(string value);
    partial void OnClientIDChanged();
    partial void OnVendorIDChanging(string value);
    partial void OnVendorIDChanged();
    partial void OndateChanging(System.Nullable<System.DateTime> value);
    partial void OndateChanged();
    partial void OnUserIdChanging(System.Nullable<int> value);
    partial void OnUserIdChanged();
    #endregion
		
		public Transaction1()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", DbType="Int")]
		public System.Nullable<int> ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WareHouseId", DbType="Int")]
		public System.Nullable<int> WareHouseId
		{
			get
			{
				return this._WareHouseId;
			}
			set
			{
				if ((this._WareHouseId != value))
				{
					this.OnWareHouseIdChanging(value);
					this.SendPropertyChanging();
					this._WareHouseId = value;
					this.SendPropertyChanged("WareHouseId");
					this.OnWareHouseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderId", DbType="Int")]
		public System.Nullable<int> OrderId
		{
			get
			{
				return this._OrderId;
			}
			set
			{
				if ((this._OrderId != value))
				{
					this.OnOrderIdChanging(value);
					this.SendPropertyChanging();
					this._OrderId = value;
					this.SendPropertyChanged("OrderId");
					this.OnOrderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CostPrice", DbType="NVarChar(MAX)")]
		public string CostPrice
		{
			get
			{
				return this._CostPrice;
			}
			set
			{
				if ((this._CostPrice != value))
				{
					this.OnCostPriceChanging(value);
					this.SendPropertyChanging();
					this._CostPrice = value;
					this.SendPropertyChanged("CostPrice");
					this.OnCostPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalePrice", DbType="NVarChar(MAX)")]
		public string SalePrice
		{
			get
			{
				return this._SalePrice;
			}
			set
			{
				if ((this._SalePrice != value))
				{
					this.OnSalePriceChanging(value);
					this.SendPropertyChanging();
					this._SalePrice = value;
					this.SendPropertyChanged("SalePrice");
					this.OnSalePriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_units", DbType="NVarChar(MAX)")]
		public string units
		{
			get
			{
				return this._units;
			}
			set
			{
				if ((this._units != value))
				{
					this.OnunitsChanging(value);
					this.SendPropertyChanging();
					this._units = value;
					this.SendPropertyChanged("units");
					this.OnunitsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionType", DbType="NVarChar(MAX)")]
		public string TransactionType
		{
			get
			{
				return this._TransactionType;
			}
			set
			{
				if ((this._TransactionType != value))
				{
					this.OnTransactionTypeChanging(value);
					this.SendPropertyChanging();
					this._TransactionType = value;
					this.SendPropertyChanged("TransactionType");
					this.OnTransactionTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientID", DbType="NVarChar(MAX)")]
		public string ClientID
		{
			get
			{
				return this._ClientID;
			}
			set
			{
				if ((this._ClientID != value))
				{
					this.OnClientIDChanging(value);
					this.SendPropertyChanging();
					this._ClientID = value;
					this.SendPropertyChanged("ClientID");
					this.OnClientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VendorID", DbType="NVarChar(MAX)")]
		public string VendorID
		{
			get
			{
				return this._VendorID;
			}
			set
			{
				if ((this._VendorID != value))
				{
					this.OnVendorIDChanging(value);
					this.SendPropertyChanging();
					this._VendorID = value;
					this.SendPropertyChanged("VendorID");
					this.OnVendorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", DbType="Date")]
		public System.Nullable<System.DateTime> date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int")]
		public System.Nullable<int> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DefaultCashAccounts")]
	public partial class DefaultCashAccount : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _DefaultPurchaseAccountId;
		
		private System.Nullable<int> _DefaultSalesAccountId;
		
		private int _WareHouseId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnDefaultPurchaseAccountIdChanging(System.Nullable<int> value);
    partial void OnDefaultPurchaseAccountIdChanged();
    partial void OnDefaultSalesAccountIdChanging(System.Nullable<int> value);
    partial void OnDefaultSalesAccountIdChanged();
    partial void OnWareHouseIdChanging(int value);
    partial void OnWareHouseIdChanged();
    #endregion
		
		public DefaultCashAccount()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefaultPurchaseAccountId", DbType="Int")]
		public System.Nullable<int> DefaultPurchaseAccountId
		{
			get
			{
				return this._DefaultPurchaseAccountId;
			}
			set
			{
				if ((this._DefaultPurchaseAccountId != value))
				{
					this.OnDefaultPurchaseAccountIdChanging(value);
					this.SendPropertyChanging();
					this._DefaultPurchaseAccountId = value;
					this.SendPropertyChanged("DefaultPurchaseAccountId");
					this.OnDefaultPurchaseAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefaultSalesAccountId", DbType="Int")]
		public System.Nullable<int> DefaultSalesAccountId
		{
			get
			{
				return this._DefaultSalesAccountId;
			}
			set
			{
				if ((this._DefaultSalesAccountId != value))
				{
					this.OnDefaultSalesAccountIdChanging(value);
					this.SendPropertyChanging();
					this._DefaultSalesAccountId = value;
					this.SendPropertyChanged("DefaultSalesAccountId");
					this.OnDefaultSalesAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WareHouseId")]
		public int WareHouseId
		{
			get
			{
				return this._WareHouseId;
			}
			set
			{
				if ((this._WareHouseId != value))
				{
					this.OnWareHouseIdChanging(value);
					this.SendPropertyChanging();
					this._WareHouseId = value;
					this.SendPropertyChanged("WareHouseId");
					this.OnWareHouseIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserWareHouseContainer")]
	public partial class UserWareHouseContainer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _UserId;
		
		private System.Nullable<int> _WareHouseId;
		
		private EntityRef<User> _User;
		
		private EntityRef<WareHouse> _WareHouse;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnUserIdChanging(System.Nullable<int> value);
    partial void OnUserIdChanged();
    partial void OnWareHouseIdChanging(System.Nullable<int> value);
    partial void OnWareHouseIdChanged();
    #endregion
		
		public UserWareHouseContainer()
		{
			this._User = default(EntityRef<User>);
			this._WareHouse = default(EntityRef<WareHouse>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int")]
		public System.Nullable<int> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WareHouseId", DbType="Int")]
		public System.Nullable<int> WareHouseId
		{
			get
			{
				return this._WareHouseId;
			}
			set
			{
				if ((this._WareHouseId != value))
				{
					if (this._WareHouse.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWareHouseIdChanging(value);
					this.SendPropertyChanging();
					this._WareHouseId = value;
					this.SendPropertyChanged("WareHouseId");
					this.OnWareHouseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserWareHouseContainer", Storage="_User", ThisKey="UserId", OtherKey="id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserWareHouseContainers.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserWareHouseContainers.Add(this);
						this._UserId = value.id;
					}
					else
					{
						this._UserId = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WareHouse_UserWareHouseContainer", Storage="_WareHouse", ThisKey="WareHouseId", OtherKey="id", IsForeignKey=true)]
		public WareHouse WareHouse
		{
			get
			{
				return this._WareHouse.Entity;
			}
			set
			{
				WareHouse previousValue = this._WareHouse.Entity;
				if (((previousValue != value) 
							|| (this._WareHouse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WareHouse.Entity = null;
						previousValue.UserWareHouseContainers.Remove(this);
					}
					this._WareHouse.Entity = value;
					if ((value != null))
					{
						value.UserWareHouseContainers.Add(this);
						this._WareHouseId = value.id;
					}
					else
					{
						this._WareHouseId = default(Nullable<int>);
					}
					this.SendPropertyChanged("WareHouse");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Vendor")]
	public partial class Vendor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private string _Address;
		
		private string _phone;
		
		private System.Nullable<int> _WareHouseId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnphoneChanging(string value);
    partial void OnphoneChanged();
    partial void OnWareHouseIdChanging(System.Nullable<int> value);
    partial void OnWareHouseIdChanged();
    #endregion
		
		public Vendor()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(MAX)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(MAX)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phone", DbType="NVarChar(MAX)")]
		public string phone
		{
			get
			{
				return this._phone;
			}
			set
			{
				if ((this._phone != value))
				{
					this.OnphoneChanging(value);
					this.SendPropertyChanging();
					this._phone = value;
					this.SendPropertyChanged("phone");
					this.OnphoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WareHouseId", DbType="Int")]
		public System.Nullable<int> WareHouseId
		{
			get
			{
				return this._WareHouseId;
			}
			set
			{
				if ((this._WareHouseId != value))
				{
					this.OnWareHouseIdChanging(value);
					this.SendPropertyChanging();
					this._WareHouseId = value;
					this.SendPropertyChanged("WareHouseId");
					this.OnWareHouseIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employees")]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _DesignationId;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _DateOfBirth;
		
		private string _Gender;
		
		private string _Address;
		
		private string _City;
		
		private string _HomePhone;
		
		private string _CellNo;
		
		private string _Email;
		
		private string _EmergencyContactNo;
		
		private System.Nullable<int> _WarehouseId;
		
		private EntitySet<HOD> _HODs;
		
		private EntitySet<PaidSalary> _PaidSalaries;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnDesignationIdChanging(System.Nullable<int> value);
    partial void OnDesignationIdChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnDateOfBirthChanging(string value);
    partial void OnDateOfBirthChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnHomePhoneChanging(string value);
    partial void OnHomePhoneChanged();
    partial void OnCellNoChanging(string value);
    partial void OnCellNoChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnEmergencyContactNoChanging(string value);
    partial void OnEmergencyContactNoChanged();
    partial void OnWarehouseIdChanging(System.Nullable<int> value);
    partial void OnWarehouseIdChanged();
    #endregion
		
		public Employee()
		{
			this._HODs = new EntitySet<HOD>(new Action<HOD>(this.attach_HODs), new Action<HOD>(this.detach_HODs));
			this._PaidSalaries = new EntitySet<PaidSalary>(new Action<PaidSalary>(this.attach_PaidSalaries), new Action<PaidSalary>(this.detach_PaidSalaries));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DesignationId", DbType="Int")]
		public System.Nullable<int> DesignationId
		{
			get
			{
				return this._DesignationId;
			}
			set
			{
				if ((this._DesignationId != value))
				{
					this.OnDesignationIdChanging(value);
					this.SendPropertyChanging();
					this._DesignationId = value;
					this.SendPropertyChanged("DesignationId");
					this.OnDesignationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(MAX)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(MAX)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfBirth", DbType="NVarChar(MAX)")]
		public string DateOfBirth
		{
			get
			{
				return this._DateOfBirth;
			}
			set
			{
				if ((this._DateOfBirth != value))
				{
					this.OnDateOfBirthChanging(value);
					this.SendPropertyChanging();
					this._DateOfBirth = value;
					this.SendPropertyChanged("DateOfBirth");
					this.OnDateOfBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="NVarChar(MAX)")]
		public string Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(MAX)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="NVarChar(MAX)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HomePhone", DbType="NVarChar(MAX)")]
		public string HomePhone
		{
			get
			{
				return this._HomePhone;
			}
			set
			{
				if ((this._HomePhone != value))
				{
					this.OnHomePhoneChanging(value);
					this.SendPropertyChanging();
					this._HomePhone = value;
					this.SendPropertyChanged("HomePhone");
					this.OnHomePhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CellNo", DbType="NVarChar(MAX)")]
		public string CellNo
		{
			get
			{
				return this._CellNo;
			}
			set
			{
				if ((this._CellNo != value))
				{
					this.OnCellNoChanging(value);
					this.SendPropertyChanging();
					this._CellNo = value;
					this.SendPropertyChanged("CellNo");
					this.OnCellNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(MAX)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmergencyContactNo", DbType="NVarChar(MAX)")]
		public string EmergencyContactNo
		{
			get
			{
				return this._EmergencyContactNo;
			}
			set
			{
				if ((this._EmergencyContactNo != value))
				{
					this.OnEmergencyContactNoChanging(value);
					this.SendPropertyChanging();
					this._EmergencyContactNo = value;
					this.SendPropertyChanged("EmergencyContactNo");
					this.OnEmergencyContactNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WarehouseId", DbType="Int")]
		public System.Nullable<int> WarehouseId
		{
			get
			{
				return this._WarehouseId;
			}
			set
			{
				if ((this._WarehouseId != value))
				{
					this.OnWarehouseIdChanging(value);
					this.SendPropertyChanging();
					this._WarehouseId = value;
					this.SendPropertyChanged("WarehouseId");
					this.OnWarehouseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_HOD", Storage="_HODs", ThisKey="id", OtherKey="EmployeeId")]
		public EntitySet<HOD> HODs
		{
			get
			{
				return this._HODs;
			}
			set
			{
				this._HODs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_PaidSalary", Storage="_PaidSalaries", ThisKey="id", OtherKey="EmployeeId")]
		public EntitySet<PaidSalary> PaidSalaries
		{
			get
			{
				return this._PaidSalaries;
			}
			set
			{
				this._PaidSalaries.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_HODs(HOD entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_HODs(HOD entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_PaidSalaries(PaidSalary entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_PaidSalaries(PaidSalary entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CashAccount")]
	public partial class CashAccount : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _CashAccountName;
		
		private System.Nullable<int> _WareHouseId;
		
		private string _OpeningBalance;
		
		private string _BeginDate;
		
		private string _AccountType;
		
		private System.Nullable<int> _ClientId;
		
		private System.Nullable<int> _VendorId;
		
		private EntitySet<CashTransaction> _CashTransactions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnCashAccountNameChanging(string value);
    partial void OnCashAccountNameChanged();
    partial void OnWareHouseIdChanging(System.Nullable<int> value);
    partial void OnWareHouseIdChanged();
    partial void OnOpeningBalanceChanging(string value);
    partial void OnOpeningBalanceChanged();
    partial void OnBeginDateChanging(string value);
    partial void OnBeginDateChanged();
    partial void OnAccountTypeChanging(string value);
    partial void OnAccountTypeChanged();
    partial void OnClientIdChanging(System.Nullable<int> value);
    partial void OnClientIdChanged();
    partial void OnVendorIdChanging(System.Nullable<int> value);
    partial void OnVendorIdChanged();
    #endregion
		
		public CashAccount()
		{
			this._CashTransactions = new EntitySet<CashTransaction>(new Action<CashTransaction>(this.attach_CashTransactions), new Action<CashTransaction>(this.detach_CashTransactions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CashAccountName", DbType="NVarChar(MAX)")]
		public string CashAccountName
		{
			get
			{
				return this._CashAccountName;
			}
			set
			{
				if ((this._CashAccountName != value))
				{
					this.OnCashAccountNameChanging(value);
					this.SendPropertyChanging();
					this._CashAccountName = value;
					this.SendPropertyChanged("CashAccountName");
					this.OnCashAccountNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WareHouseId", DbType="Int")]
		public System.Nullable<int> WareHouseId
		{
			get
			{
				return this._WareHouseId;
			}
			set
			{
				if ((this._WareHouseId != value))
				{
					this.OnWareHouseIdChanging(value);
					this.SendPropertyChanging();
					this._WareHouseId = value;
					this.SendPropertyChanged("WareHouseId");
					this.OnWareHouseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OpeningBalance", DbType="NVarChar(MAX)")]
		public string OpeningBalance
		{
			get
			{
				return this._OpeningBalance;
			}
			set
			{
				if ((this._OpeningBalance != value))
				{
					this.OnOpeningBalanceChanging(value);
					this.SendPropertyChanging();
					this._OpeningBalance = value;
					this.SendPropertyChanged("OpeningBalance");
					this.OnOpeningBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeginDate", DbType="NVarChar(MAX)")]
		public string BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountType", DbType="NVarChar(MAX)")]
		public string AccountType
		{
			get
			{
				return this._AccountType;
			}
			set
			{
				if ((this._AccountType != value))
				{
					this.OnAccountTypeChanging(value);
					this.SendPropertyChanging();
					this._AccountType = value;
					this.SendPropertyChanged("AccountType");
					this.OnAccountTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientId", DbType="Int")]
		public System.Nullable<int> ClientId
		{
			get
			{
				return this._ClientId;
			}
			set
			{
				if ((this._ClientId != value))
				{
					this.OnClientIdChanging(value);
					this.SendPropertyChanging();
					this._ClientId = value;
					this.SendPropertyChanged("ClientId");
					this.OnClientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VendorId", DbType="Int")]
		public System.Nullable<int> VendorId
		{
			get
			{
				return this._VendorId;
			}
			set
			{
				if ((this._VendorId != value))
				{
					this.OnVendorIdChanging(value);
					this.SendPropertyChanging();
					this._VendorId = value;
					this.SendPropertyChanged("VendorId");
					this.OnVendorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CashAccount_CashTransaction", Storage="_CashTransactions", ThisKey="id", OtherKey="CashAccountId")]
		public EntitySet<CashTransaction> CashTransactions
		{
			get
			{
				return this._CashTransactions;
			}
			set
			{
				this._CashTransactions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CashTransactions(CashTransaction entity)
		{
			this.SendPropertyChanging();
			entity.CashAccount = this;
		}
		
		private void detach_CashTransactions(CashTransaction entity)
		{
			this.SendPropertyChanging();
			entity.CashAccount = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DefaultBankAccounts")]
	public partial class DefaultBankAccount : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _PurchaseDefaultAccountId;
		
		private System.Nullable<int> _SalesDefaultAccountId;
		
		private System.Nullable<int> _WareHouseId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnPurchaseDefaultAccountIdChanging(System.Nullable<int> value);
    partial void OnPurchaseDefaultAccountIdChanged();
    partial void OnSalesDefaultAccountIdChanging(System.Nullable<int> value);
    partial void OnSalesDefaultAccountIdChanged();
    partial void OnWareHouseIdChanging(System.Nullable<int> value);
    partial void OnWareHouseIdChanged();
    #endregion
		
		public DefaultBankAccount()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PurchaseDefaultAccountId", DbType="Int")]
		public System.Nullable<int> PurchaseDefaultAccountId
		{
			get
			{
				return this._PurchaseDefaultAccountId;
			}
			set
			{
				if ((this._PurchaseDefaultAccountId != value))
				{
					this.OnPurchaseDefaultAccountIdChanging(value);
					this.SendPropertyChanging();
					this._PurchaseDefaultAccountId = value;
					this.SendPropertyChanged("PurchaseDefaultAccountId");
					this.OnPurchaseDefaultAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalesDefaultAccountId", DbType="Int")]
		public System.Nullable<int> SalesDefaultAccountId
		{
			get
			{
				return this._SalesDefaultAccountId;
			}
			set
			{
				if ((this._SalesDefaultAccountId != value))
				{
					this.OnSalesDefaultAccountIdChanging(value);
					this.SendPropertyChanging();
					this._SalesDefaultAccountId = value;
					this.SendPropertyChanged("SalesDefaultAccountId");
					this.OnSalesDefaultAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WareHouseId", DbType="Int")]
		public System.Nullable<int> WareHouseId
		{
			get
			{
				return this._WareHouseId;
			}
			set
			{
				if ((this._WareHouseId != value))
				{
					this.OnWareHouseIdChanging(value);
					this.SendPropertyChanging();
					this._WareHouseId = value;
					this.SendPropertyChanged("WareHouseId");
					this.OnWareHouseIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PaymentLine")]
	public partial class PaymentLine : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _PaymentId;
		
		private string _PaidAmount;
		
		private string _RemainingAmount;
		
		private System.Nullable<int> _BankId;
		
		private System.Nullable<System.DateTime> _Date;
		
		private string _CumulativeAmount;
		
		private string _ModeOfPayment;
		
		private string _Cheque;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnPaymentIdChanging(System.Nullable<int> value);
    partial void OnPaymentIdChanged();
    partial void OnPaidAmountChanging(string value);
    partial void OnPaidAmountChanged();
    partial void OnRemainingAmountChanging(string value);
    partial void OnRemainingAmountChanged();
    partial void OnBankIdChanging(System.Nullable<int> value);
    partial void OnBankIdChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnCumulativeAmountChanging(string value);
    partial void OnCumulativeAmountChanged();
    partial void OnModeOfPaymentChanging(string value);
    partial void OnModeOfPaymentChanged();
    partial void OnChequeChanging(string value);
    partial void OnChequeChanged();
    #endregion
		
		public PaymentLine()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentId", DbType="Int")]
		public System.Nullable<int> PaymentId
		{
			get
			{
				return this._PaymentId;
			}
			set
			{
				if ((this._PaymentId != value))
				{
					this.OnPaymentIdChanging(value);
					this.SendPropertyChanging();
					this._PaymentId = value;
					this.SendPropertyChanged("PaymentId");
					this.OnPaymentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaidAmount", DbType="NVarChar(MAX)")]
		public string PaidAmount
		{
			get
			{
				return this._PaidAmount;
			}
			set
			{
				if ((this._PaidAmount != value))
				{
					this.OnPaidAmountChanging(value);
					this.SendPropertyChanging();
					this._PaidAmount = value;
					this.SendPropertyChanged("PaidAmount");
					this.OnPaidAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RemainingAmount", DbType="NVarChar(MAX)")]
		public string RemainingAmount
		{
			get
			{
				return this._RemainingAmount;
			}
			set
			{
				if ((this._RemainingAmount != value))
				{
					this.OnRemainingAmountChanging(value);
					this.SendPropertyChanging();
					this._RemainingAmount = value;
					this.SendPropertyChanged("RemainingAmount");
					this.OnRemainingAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankId", DbType="Int")]
		public System.Nullable<int> BankId
		{
			get
			{
				return this._BankId;
			}
			set
			{
				if ((this._BankId != value))
				{
					this.OnBankIdChanging(value);
					this.SendPropertyChanging();
					this._BankId = value;
					this.SendPropertyChanged("BankId");
					this.OnBankIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Date")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CumulativeAmount", DbType="NVarChar(MAX)")]
		public string CumulativeAmount
		{
			get
			{
				return this._CumulativeAmount;
			}
			set
			{
				if ((this._CumulativeAmount != value))
				{
					this.OnCumulativeAmountChanging(value);
					this.SendPropertyChanging();
					this._CumulativeAmount = value;
					this.SendPropertyChanged("CumulativeAmount");
					this.OnCumulativeAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModeOfPayment", DbType="NVarChar(50)")]
		public string ModeOfPayment
		{
			get
			{
				return this._ModeOfPayment;
			}
			set
			{
				if ((this._ModeOfPayment != value))
				{
					this.OnModeOfPaymentChanging(value);
					this.SendPropertyChanging();
					this._ModeOfPayment = value;
					this.SendPropertyChanged("ModeOfPayment");
					this.OnModeOfPaymentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cheque", DbType="NVarChar(MAX)")]
		public string Cheque
		{
			get
			{
				return this._Cheque;
			}
			set
			{
				if ((this._Cheque != value))
				{
					this.OnChequeChanging(value);
					this.SendPropertyChanging();
					this._Cheque = value;
					this.SendPropertyChanged("Cheque");
					this.OnChequeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Products")]
	public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _ProductCode;
		
		private string _Name;
		
		private string _tag1;
		
		private string _tag2;
		
		private string _tag3;
		
		private string _costPrice;
		
		private string _salePrice;
		
		private string _Manufacturer;
		
		private string _Description;
		
		private System.Nullable<int> _VendorId;
		
		private System.Nullable<int> _FiscalYearId;
		
		private System.Nullable<System.DateTime> _eDate;
		
		private System.Nullable<int> _WareHouseId;
		
		private EntitySet<TransactionDetail> _TransactionDetails;
		
		private EntitySet<Inventory> _Inventories;
		
		private EntitySet<OrderLine> _OrderLines;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnProductCodeChanging(string value);
    partial void OnProductCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void Ontag1Changing(string value);
    partial void Ontag1Changed();
    partial void Ontag2Changing(string value);
    partial void Ontag2Changed();
    partial void Ontag3Changing(string value);
    partial void Ontag3Changed();
    partial void OncostPriceChanging(string value);
    partial void OncostPriceChanged();
    partial void OnsalePriceChanging(string value);
    partial void OnsalePriceChanged();
    partial void OnManufacturerChanging(string value);
    partial void OnManufacturerChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnVendorIdChanging(System.Nullable<int> value);
    partial void OnVendorIdChanged();
    partial void OnFiscalYearIdChanging(System.Nullable<int> value);
    partial void OnFiscalYearIdChanged();
    partial void OneDateChanging(System.Nullable<System.DateTime> value);
    partial void OneDateChanged();
    partial void OnWareHouseIdChanging(System.Nullable<int> value);
    partial void OnWareHouseIdChanged();
    #endregion
		
		public Product()
		{
			this._TransactionDetails = new EntitySet<TransactionDetail>(new Action<TransactionDetail>(this.attach_TransactionDetails), new Action<TransactionDetail>(this.detach_TransactionDetails));
			this._Inventories = new EntitySet<Inventory>(new Action<Inventory>(this.attach_Inventories), new Action<Inventory>(this.detach_Inventories));
			this._OrderLines = new EntitySet<OrderLine>(new Action<OrderLine>(this.attach_OrderLines), new Action<OrderLine>(this.detach_OrderLines));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductCode", DbType="NVarChar(MAX)")]
		public string ProductCode
		{
			get
			{
				return this._ProductCode;
			}
			set
			{
				if ((this._ProductCode != value))
				{
					this.OnProductCodeChanging(value);
					this.SendPropertyChanging();
					this._ProductCode = value;
					this.SendPropertyChanged("ProductCode");
					this.OnProductCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tag1", DbType="NVarChar(MAX)")]
		public string tag1
		{
			get
			{
				return this._tag1;
			}
			set
			{
				if ((this._tag1 != value))
				{
					this.Ontag1Changing(value);
					this.SendPropertyChanging();
					this._tag1 = value;
					this.SendPropertyChanged("tag1");
					this.Ontag1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tag2", DbType="NVarChar(MAX)")]
		public string tag2
		{
			get
			{
				return this._tag2;
			}
			set
			{
				if ((this._tag2 != value))
				{
					this.Ontag2Changing(value);
					this.SendPropertyChanging();
					this._tag2 = value;
					this.SendPropertyChanged("tag2");
					this.Ontag2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tag3", DbType="NVarChar(MAX)")]
		public string tag3
		{
			get
			{
				return this._tag3;
			}
			set
			{
				if ((this._tag3 != value))
				{
					this.Ontag3Changing(value);
					this.SendPropertyChanging();
					this._tag3 = value;
					this.SendPropertyChanged("tag3");
					this.Ontag3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_costPrice", DbType="NVarChar(MAX)")]
		public string costPrice
		{
			get
			{
				return this._costPrice;
			}
			set
			{
				if ((this._costPrice != value))
				{
					this.OncostPriceChanging(value);
					this.SendPropertyChanging();
					this._costPrice = value;
					this.SendPropertyChanged("costPrice");
					this.OncostPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_salePrice", DbType="NVarChar(MAX)")]
		public string salePrice
		{
			get
			{
				return this._salePrice;
			}
			set
			{
				if ((this._salePrice != value))
				{
					this.OnsalePriceChanging(value);
					this.SendPropertyChanging();
					this._salePrice = value;
					this.SendPropertyChanged("salePrice");
					this.OnsalePriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Manufacturer", DbType="NVarChar(MAX)")]
		public string Manufacturer
		{
			get
			{
				return this._Manufacturer;
			}
			set
			{
				if ((this._Manufacturer != value))
				{
					this.OnManufacturerChanging(value);
					this.SendPropertyChanging();
					this._Manufacturer = value;
					this.SendPropertyChanged("Manufacturer");
					this.OnManufacturerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VendorId", DbType="Int")]
		public System.Nullable<int> VendorId
		{
			get
			{
				return this._VendorId;
			}
			set
			{
				if ((this._VendorId != value))
				{
					this.OnVendorIdChanging(value);
					this.SendPropertyChanging();
					this._VendorId = value;
					this.SendPropertyChanged("VendorId");
					this.OnVendorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FiscalYearId", DbType="Int")]
		public System.Nullable<int> FiscalYearId
		{
			get
			{
				return this._FiscalYearId;
			}
			set
			{
				if ((this._FiscalYearId != value))
				{
					this.OnFiscalYearIdChanging(value);
					this.SendPropertyChanging();
					this._FiscalYearId = value;
					this.SendPropertyChanged("FiscalYearId");
					this.OnFiscalYearIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_eDate", DbType="Date")]
		public System.Nullable<System.DateTime> eDate
		{
			get
			{
				return this._eDate;
			}
			set
			{
				if ((this._eDate != value))
				{
					this.OneDateChanging(value);
					this.SendPropertyChanging();
					this._eDate = value;
					this.SendPropertyChanged("eDate");
					this.OneDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WareHouseId", DbType="Int")]
		public System.Nullable<int> WareHouseId
		{
			get
			{
				return this._WareHouseId;
			}
			set
			{
				if ((this._WareHouseId != value))
				{
					this.OnWareHouseIdChanging(value);
					this.SendPropertyChanging();
					this._WareHouseId = value;
					this.SendPropertyChanged("WareHouseId");
					this.OnWareHouseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_TransactionDetail", Storage="_TransactionDetails", ThisKey="id", OtherKey="ProductId")]
		public EntitySet<TransactionDetail> TransactionDetails
		{
			get
			{
				return this._TransactionDetails;
			}
			set
			{
				this._TransactionDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Inventory", Storage="_Inventories", ThisKey="id", OtherKey="ProductId")]
		public EntitySet<Inventory> Inventories
		{
			get
			{
				return this._Inventories;
			}
			set
			{
				this._Inventories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_OrderLine", Storage="_OrderLines", ThisKey="id", OtherKey="ProductId")]
		public EntitySet<OrderLine> OrderLines
		{
			get
			{
				return this._OrderLines;
			}
			set
			{
				this._OrderLines.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TransactionDetails(TransactionDetail entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_TransactionDetails(TransactionDetail entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_Inventories(Inventory entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_Inventories(Inventory entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_OrderLines(OrderLine entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_OrderLines(OrderLine entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CashTransaction")]
	public partial class CashTransaction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _CashAccountId;
		
		private string _Debit;
		
		private string _Credit;
		
		private string _Description;
		
		private string _Total;
		
		private System.Nullable<int> _TransactionId;
		
		private System.Nullable<int> _OrderId;
		
		private string _TransactionType;
		
		private System.Nullable<int> _FiscalYearId;
		
		private System.Nullable<System.DateTime> _eDate;
		
		private System.Nullable<int> _WareHouseId;
		
		private System.Nullable<int> _UserId;
		
		private EntityRef<CashAccount> _CashAccount;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnCashAccountIdChanging(System.Nullable<int> value);
    partial void OnCashAccountIdChanged();
    partial void OnDebitChanging(string value);
    partial void OnDebitChanged();
    partial void OnCreditChanging(string value);
    partial void OnCreditChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnTotalChanging(string value);
    partial void OnTotalChanged();
    partial void OnTransactionIdChanging(System.Nullable<int> value);
    partial void OnTransactionIdChanged();
    partial void OnOrderIdChanging(System.Nullable<int> value);
    partial void OnOrderIdChanged();
    partial void OnTransactionTypeChanging(string value);
    partial void OnTransactionTypeChanged();
    partial void OnFiscalYearIdChanging(System.Nullable<int> value);
    partial void OnFiscalYearIdChanged();
    partial void OneDateChanging(System.Nullable<System.DateTime> value);
    partial void OneDateChanged();
    partial void OnWareHouseIdChanging(System.Nullable<int> value);
    partial void OnWareHouseIdChanged();
    partial void OnUserIdChanging(System.Nullable<int> value);
    partial void OnUserIdChanged();
    #endregion
		
		public CashTransaction()
		{
			this._CashAccount = default(EntityRef<CashAccount>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CashAccountId", DbType="Int")]
		public System.Nullable<int> CashAccountId
		{
			get
			{
				return this._CashAccountId;
			}
			set
			{
				if ((this._CashAccountId != value))
				{
					if (this._CashAccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCashAccountIdChanging(value);
					this.SendPropertyChanging();
					this._CashAccountId = value;
					this.SendPropertyChanged("CashAccountId");
					this.OnCashAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Debit", DbType="NVarChar(MAX)")]
		public string Debit
		{
			get
			{
				return this._Debit;
			}
			set
			{
				if ((this._Debit != value))
				{
					this.OnDebitChanging(value);
					this.SendPropertyChanging();
					this._Debit = value;
					this.SendPropertyChanged("Debit");
					this.OnDebitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Credit", DbType="NVarChar(MAX)")]
		public string Credit
		{
			get
			{
				return this._Credit;
			}
			set
			{
				if ((this._Credit != value))
				{
					this.OnCreditChanging(value);
					this.SendPropertyChanging();
					this._Credit = value;
					this.SendPropertyChanged("Credit");
					this.OnCreditChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Total", DbType="NVarChar(MAX)")]
		public string Total
		{
			get
			{
				return this._Total;
			}
			set
			{
				if ((this._Total != value))
				{
					this.OnTotalChanging(value);
					this.SendPropertyChanging();
					this._Total = value;
					this.SendPropertyChanged("Total");
					this.OnTotalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionId", DbType="Int")]
		public System.Nullable<int> TransactionId
		{
			get
			{
				return this._TransactionId;
			}
			set
			{
				if ((this._TransactionId != value))
				{
					this.OnTransactionIdChanging(value);
					this.SendPropertyChanging();
					this._TransactionId = value;
					this.SendPropertyChanged("TransactionId");
					this.OnTransactionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderId", DbType="Int")]
		public System.Nullable<int> OrderId
		{
			get
			{
				return this._OrderId;
			}
			set
			{
				if ((this._OrderId != value))
				{
					this.OnOrderIdChanging(value);
					this.SendPropertyChanging();
					this._OrderId = value;
					this.SendPropertyChanged("OrderId");
					this.OnOrderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionType", DbType="NVarChar(MAX)")]
		public string TransactionType
		{
			get
			{
				return this._TransactionType;
			}
			set
			{
				if ((this._TransactionType != value))
				{
					this.OnTransactionTypeChanging(value);
					this.SendPropertyChanging();
					this._TransactionType = value;
					this.SendPropertyChanged("TransactionType");
					this.OnTransactionTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FiscalYearId", DbType="Int")]
		public System.Nullable<int> FiscalYearId
		{
			get
			{
				return this._FiscalYearId;
			}
			set
			{
				if ((this._FiscalYearId != value))
				{
					this.OnFiscalYearIdChanging(value);
					this.SendPropertyChanging();
					this._FiscalYearId = value;
					this.SendPropertyChanged("FiscalYearId");
					this.OnFiscalYearIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_eDate", DbType="Date")]
		public System.Nullable<System.DateTime> eDate
		{
			get
			{
				return this._eDate;
			}
			set
			{
				if ((this._eDate != value))
				{
					this.OneDateChanging(value);
					this.SendPropertyChanging();
					this._eDate = value;
					this.SendPropertyChanged("eDate");
					this.OneDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WareHouseId", DbType="Int")]
		public System.Nullable<int> WareHouseId
		{
			get
			{
				return this._WareHouseId;
			}
			set
			{
				if ((this._WareHouseId != value))
				{
					this.OnWareHouseIdChanging(value);
					this.SendPropertyChanging();
					this._WareHouseId = value;
					this.SendPropertyChanged("WareHouseId");
					this.OnWareHouseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int")]
		public System.Nullable<int> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CashAccount_CashTransaction", Storage="_CashAccount", ThisKey="CashAccountId", OtherKey="id", IsForeignKey=true)]
		public CashAccount CashAccount
		{
			get
			{
				return this._CashAccount.Entity;
			}
			set
			{
				CashAccount previousValue = this._CashAccount.Entity;
				if (((previousValue != value) 
							|| (this._CashAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CashAccount.Entity = null;
						previousValue.CashTransactions.Remove(this);
					}
					this._CashAccount.Entity = value;
					if ((value != null))
					{
						value.CashTransactions.Add(this);
						this._CashAccountId = value.id;
					}
					else
					{
						this._CashAccountId = default(Nullable<int>);
					}
					this.SendPropertyChanged("CashAccount");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Clients")]
	public partial class Client : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _ClientTypeId;
		
		private string _Name;
		
		private string _phone;
		
		private string _EmailAddress;
		
		private string _Address1;
		
		private string _Address2;
		
		private string _City;
		
		private System.Nullable<bool> _isVendor;
		
		private System.Nullable<System.DateTime> _eDate;
		
		private System.Nullable<int> _WareHouseId;
		
		private string _NIC;
		
		private string _GrantorName;
		
		private string _GrantorNIC;
		
		private EntityRef<ClientType> _ClientType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnClientTypeIdChanging(System.Nullable<int> value);
    partial void OnClientTypeIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnphoneChanging(string value);
    partial void OnphoneChanged();
    partial void OnEmailAddressChanging(string value);
    partial void OnEmailAddressChanged();
    partial void OnAddress1Changing(string value);
    partial void OnAddress1Changed();
    partial void OnAddress2Changing(string value);
    partial void OnAddress2Changed();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnisVendorChanging(System.Nullable<bool> value);
    partial void OnisVendorChanged();
    partial void OneDateChanging(System.Nullable<System.DateTime> value);
    partial void OneDateChanged();
    partial void OnWareHouseIdChanging(System.Nullable<int> value);
    partial void OnWareHouseIdChanged();
    partial void OnNICChanging(string value);
    partial void OnNICChanged();
    partial void OnGrantorNameChanging(string value);
    partial void OnGrantorNameChanged();
    partial void OnGrantorNICChanging(string value);
    partial void OnGrantorNICChanged();
    #endregion
		
		public Client()
		{
			this._ClientType = default(EntityRef<ClientType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientTypeId", DbType="Int")]
		public System.Nullable<int> ClientTypeId
		{
			get
			{
				return this._ClientTypeId;
			}
			set
			{
				if ((this._ClientTypeId != value))
				{
					if (this._ClientType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientTypeIdChanging(value);
					this.SendPropertyChanging();
					this._ClientTypeId = value;
					this.SendPropertyChanged("ClientTypeId");
					this.OnClientTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phone", DbType="NVarChar(MAX)")]
		public string phone
		{
			get
			{
				return this._phone;
			}
			set
			{
				if ((this._phone != value))
				{
					this.OnphoneChanging(value);
					this.SendPropertyChanging();
					this._phone = value;
					this.SendPropertyChanged("phone");
					this.OnphoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailAddress", DbType="NVarChar(MAX)")]
		public string EmailAddress
		{
			get
			{
				return this._EmailAddress;
			}
			set
			{
				if ((this._EmailAddress != value))
				{
					this.OnEmailAddressChanging(value);
					this.SendPropertyChanging();
					this._EmailAddress = value;
					this.SendPropertyChanged("EmailAddress");
					this.OnEmailAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address1", DbType="NVarChar(MAX)")]
		public string Address1
		{
			get
			{
				return this._Address1;
			}
			set
			{
				if ((this._Address1 != value))
				{
					this.OnAddress1Changing(value);
					this.SendPropertyChanging();
					this._Address1 = value;
					this.SendPropertyChanged("Address1");
					this.OnAddress1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address2", DbType="NVarChar(MAX)")]
		public string Address2
		{
			get
			{
				return this._Address2;
			}
			set
			{
				if ((this._Address2 != value))
				{
					this.OnAddress2Changing(value);
					this.SendPropertyChanging();
					this._Address2 = value;
					this.SendPropertyChanged("Address2");
					this.OnAddress2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="NVarChar(MAX)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isVendor", DbType="Bit")]
		public System.Nullable<bool> isVendor
		{
			get
			{
				return this._isVendor;
			}
			set
			{
				if ((this._isVendor != value))
				{
					this.OnisVendorChanging(value);
					this.SendPropertyChanging();
					this._isVendor = value;
					this.SendPropertyChanged("isVendor");
					this.OnisVendorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_eDate", DbType="Date")]
		public System.Nullable<System.DateTime> eDate
		{
			get
			{
				return this._eDate;
			}
			set
			{
				if ((this._eDate != value))
				{
					this.OneDateChanging(value);
					this.SendPropertyChanging();
					this._eDate = value;
					this.SendPropertyChanged("eDate");
					this.OneDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WareHouseId", DbType="Int")]
		public System.Nullable<int> WareHouseId
		{
			get
			{
				return this._WareHouseId;
			}
			set
			{
				if ((this._WareHouseId != value))
				{
					this.OnWareHouseIdChanging(value);
					this.SendPropertyChanging();
					this._WareHouseId = value;
					this.SendPropertyChanged("WareHouseId");
					this.OnWareHouseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NIC", DbType="NVarChar(MAX)")]
		public string NIC
		{
			get
			{
				return this._NIC;
			}
			set
			{
				if ((this._NIC != value))
				{
					this.OnNICChanging(value);
					this.SendPropertyChanging();
					this._NIC = value;
					this.SendPropertyChanged("NIC");
					this.OnNICChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GrantorName", DbType="NVarChar(MAX)")]
		public string GrantorName
		{
			get
			{
				return this._GrantorName;
			}
			set
			{
				if ((this._GrantorName != value))
				{
					this.OnGrantorNameChanging(value);
					this.SendPropertyChanging();
					this._GrantorName = value;
					this.SendPropertyChanged("GrantorName");
					this.OnGrantorNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GrantorNIC", DbType="NVarChar(MAX)")]
		public string GrantorNIC
		{
			get
			{
				return this._GrantorNIC;
			}
			set
			{
				if ((this._GrantorNIC != value))
				{
					this.OnGrantorNICChanging(value);
					this.SendPropertyChanging();
					this._GrantorNIC = value;
					this.SendPropertyChanged("GrantorNIC");
					this.OnGrantorNICChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClientType_Client", Storage="_ClientType", ThisKey="ClientTypeId", OtherKey="id", IsForeignKey=true)]
		public ClientType ClientType
		{
			get
			{
				return this._ClientType.Entity;
			}
			set
			{
				ClientType previousValue = this._ClientType.Entity;
				if (((previousValue != value) 
							|| (this._ClientType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ClientType.Entity = null;
						previousValue.Clients.Remove(this);
					}
					this._ClientType.Entity = value;
					if ((value != null))
					{
						value.Clients.Add(this);
						this._ClientTypeId = value.id;
					}
					else
					{
						this._ClientTypeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ClientType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Orders")]
	public partial class Order : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _OrderNo;
		
		private string _OrderName;
		
		private string _OrderDescription;
		
		private System.Nullable<System.DateTime> _OrderDate;
		
		private System.Nullable<System.DateTime> _deliveryDate;
		
		private string _TotalCost;
		
		private string _OrderType;
		
		private System.Nullable<int> _WareHouseId;
		
		private System.Nullable<int> _ClientId;
		
		private System.Nullable<int> _VendorId;
		
		private System.Nullable<int> _FiscalYearId;
		
		private System.Nullable<System.DateTime> _eDate;
		
		private string _Installments;
		
		private string _InstallmentDueDate;
		
		private string _ModeOfPayment;
		
		private string _GrantorName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnOrderNoChanging(string value);
    partial void OnOrderNoChanged();
    partial void OnOrderNameChanging(string value);
    partial void OnOrderNameChanged();
    partial void OnOrderDescriptionChanging(string value);
    partial void OnOrderDescriptionChanged();
    partial void OnOrderDateChanging(System.Nullable<System.DateTime> value);
    partial void OnOrderDateChanged();
    partial void OndeliveryDateChanging(System.Nullable<System.DateTime> value);
    partial void OndeliveryDateChanged();
    partial void OnTotalCostChanging(string value);
    partial void OnTotalCostChanged();
    partial void OnOrderTypeChanging(string value);
    partial void OnOrderTypeChanged();
    partial void OnWareHouseIdChanging(System.Nullable<int> value);
    partial void OnWareHouseIdChanged();
    partial void OnClientIdChanging(System.Nullable<int> value);
    partial void OnClientIdChanged();
    partial void OnVendorIdChanging(System.Nullable<int> value);
    partial void OnVendorIdChanged();
    partial void OnFiscalYearIdChanging(System.Nullable<int> value);
    partial void OnFiscalYearIdChanged();
    partial void OneDateChanging(System.Nullable<System.DateTime> value);
    partial void OneDateChanged();
    partial void OnInstallmentsChanging(string value);
    partial void OnInstallmentsChanged();
    partial void OnInstallmentDueDateChanging(string value);
    partial void OnInstallmentDueDateChanged();
    partial void OnModeOfPaymentChanging(string value);
    partial void OnModeOfPaymentChanged();
    partial void OnGrantorNameChanging(string value);
    partial void OnGrantorNameChanged();
    #endregion
		
		public Order()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderNo", DbType="NVarChar(MAX)")]
		public string OrderNo
		{
			get
			{
				return this._OrderNo;
			}
			set
			{
				if ((this._OrderNo != value))
				{
					this.OnOrderNoChanging(value);
					this.SendPropertyChanging();
					this._OrderNo = value;
					this.SendPropertyChanged("OrderNo");
					this.OnOrderNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderName", DbType="NVarChar(MAX)")]
		public string OrderName
		{
			get
			{
				return this._OrderName;
			}
			set
			{
				if ((this._OrderName != value))
				{
					this.OnOrderNameChanging(value);
					this.SendPropertyChanging();
					this._OrderName = value;
					this.SendPropertyChanged("OrderName");
					this.OnOrderNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderDescription", DbType="NVarChar(MAX)")]
		public string OrderDescription
		{
			get
			{
				return this._OrderDescription;
			}
			set
			{
				if ((this._OrderDescription != value))
				{
					this.OnOrderDescriptionChanging(value);
					this.SendPropertyChanging();
					this._OrderDescription = value;
					this.SendPropertyChanged("OrderDescription");
					this.OnOrderDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderDate", DbType="Date")]
		public System.Nullable<System.DateTime> OrderDate
		{
			get
			{
				return this._OrderDate;
			}
			set
			{
				if ((this._OrderDate != value))
				{
					this.OnOrderDateChanging(value);
					this.SendPropertyChanging();
					this._OrderDate = value;
					this.SendPropertyChanged("OrderDate");
					this.OnOrderDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_deliveryDate", DbType="Date")]
		public System.Nullable<System.DateTime> deliveryDate
		{
			get
			{
				return this._deliveryDate;
			}
			set
			{
				if ((this._deliveryDate != value))
				{
					this.OndeliveryDateChanging(value);
					this.SendPropertyChanging();
					this._deliveryDate = value;
					this.SendPropertyChanged("deliveryDate");
					this.OndeliveryDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalCost", DbType="NVarChar(MAX)")]
		public string TotalCost
		{
			get
			{
				return this._TotalCost;
			}
			set
			{
				if ((this._TotalCost != value))
				{
					this.OnTotalCostChanging(value);
					this.SendPropertyChanging();
					this._TotalCost = value;
					this.SendPropertyChanged("TotalCost");
					this.OnTotalCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderType", DbType="NVarChar(MAX)")]
		public string OrderType
		{
			get
			{
				return this._OrderType;
			}
			set
			{
				if ((this._OrderType != value))
				{
					this.OnOrderTypeChanging(value);
					this.SendPropertyChanging();
					this._OrderType = value;
					this.SendPropertyChanged("OrderType");
					this.OnOrderTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WareHouseId", DbType="Int")]
		public System.Nullable<int> WareHouseId
		{
			get
			{
				return this._WareHouseId;
			}
			set
			{
				if ((this._WareHouseId != value))
				{
					this.OnWareHouseIdChanging(value);
					this.SendPropertyChanging();
					this._WareHouseId = value;
					this.SendPropertyChanged("WareHouseId");
					this.OnWareHouseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientId", DbType="Int")]
		public System.Nullable<int> ClientId
		{
			get
			{
				return this._ClientId;
			}
			set
			{
				if ((this._ClientId != value))
				{
					this.OnClientIdChanging(value);
					this.SendPropertyChanging();
					this._ClientId = value;
					this.SendPropertyChanged("ClientId");
					this.OnClientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VendorId", DbType="Int")]
		public System.Nullable<int> VendorId
		{
			get
			{
				return this._VendorId;
			}
			set
			{
				if ((this._VendorId != value))
				{
					this.OnVendorIdChanging(value);
					this.SendPropertyChanging();
					this._VendorId = value;
					this.SendPropertyChanged("VendorId");
					this.OnVendorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FiscalYearId", DbType="Int")]
		public System.Nullable<int> FiscalYearId
		{
			get
			{
				return this._FiscalYearId;
			}
			set
			{
				if ((this._FiscalYearId != value))
				{
					this.OnFiscalYearIdChanging(value);
					this.SendPropertyChanging();
					this._FiscalYearId = value;
					this.SendPropertyChanged("FiscalYearId");
					this.OnFiscalYearIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_eDate", DbType="Date")]
		public System.Nullable<System.DateTime> eDate
		{
			get
			{
				return this._eDate;
			}
			set
			{
				if ((this._eDate != value))
				{
					this.OneDateChanging(value);
					this.SendPropertyChanging();
					this._eDate = value;
					this.SendPropertyChanged("eDate");
					this.OneDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Installments", DbType="NVarChar(MAX)")]
		public string Installments
		{
			get
			{
				return this._Installments;
			}
			set
			{
				if ((this._Installments != value))
				{
					this.OnInstallmentsChanging(value);
					this.SendPropertyChanging();
					this._Installments = value;
					this.SendPropertyChanged("Installments");
					this.OnInstallmentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InstallmentDueDate", DbType="NVarChar(MAX)")]
		public string InstallmentDueDate
		{
			get
			{
				return this._InstallmentDueDate;
			}
			set
			{
				if ((this._InstallmentDueDate != value))
				{
					this.OnInstallmentDueDateChanging(value);
					this.SendPropertyChanging();
					this._InstallmentDueDate = value;
					this.SendPropertyChanged("InstallmentDueDate");
					this.OnInstallmentDueDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModeOfPayment", DbType="NVarChar(MAX)")]
		public string ModeOfPayment
		{
			get
			{
				return this._ModeOfPayment;
			}
			set
			{
				if ((this._ModeOfPayment != value))
				{
					this.OnModeOfPaymentChanging(value);
					this.SendPropertyChanging();
					this._ModeOfPayment = value;
					this.SendPropertyChanged("ModeOfPayment");
					this.OnModeOfPaymentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GrantorName", DbType="NVarChar(MAX)")]
		public string GrantorName
		{
			get
			{
				return this._GrantorName;
			}
			set
			{
				if ((this._GrantorName != value))
				{
					this.OnGrantorNameChanging(value);
					this.SendPropertyChanging();
					this._GrantorName = value;
					this.SendPropertyChanged("GrantorName");
					this.OnGrantorNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
